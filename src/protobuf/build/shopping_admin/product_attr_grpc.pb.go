// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: protos/shopping_admin/product_attr.proto

package shopping_admin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ProductAttrService_Create_FullMethodName       = "/template.ProductAttrService/Create"
	ProductAttrService_Update_FullMethodName       = "/template.ProductAttrService/Update"
	ProductAttrService_Delete_FullMethodName       = "/template.ProductAttrService/Delete"
	ProductAttrService_FindById_FullMethodName     = "/template.ProductAttrService/FindById"
	ProductAttrService_FindPageList_FullMethodName = "/template.ProductAttrService/FindPageList"
)

// ProductAttrServiceClient is the client API for ProductAttrService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductAttrServiceClient interface {
	// 新增
	Create(ctx context.Context, in *ProductAttr, opts ...grpc.CallOption) (*ProductAttrResponse, error)
	// 修改
	Update(ctx context.Context, in *ProductAttr, opts ...grpc.CallOption) (*ProductAttrResponse, error)
	// 删除
	Delete(ctx context.Context, in *ProductAttrIds, opts ...grpc.CallOption) (*ProductAttrResponse, error)
	// 查询 详情
	FindById(ctx context.Context, in *ProductAttrIds, opts ...grpc.CallOption) (*ProductAttrResponse, error)
	// 查询 分页
	FindPageList(ctx context.Context, in *ProductAttrPageAuthQuery, opts ...grpc.CallOption) (*ProductAttrResponse, error)
}

type productAttrServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductAttrServiceClient(cc grpc.ClientConnInterface) ProductAttrServiceClient {
	return &productAttrServiceClient{cc}
}

func (c *productAttrServiceClient) Create(ctx context.Context, in *ProductAttr, opts ...grpc.CallOption) (*ProductAttrResponse, error) {
	out := new(ProductAttrResponse)
	err := c.cc.Invoke(ctx, ProductAttrService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productAttrServiceClient) Update(ctx context.Context, in *ProductAttr, opts ...grpc.CallOption) (*ProductAttrResponse, error) {
	out := new(ProductAttrResponse)
	err := c.cc.Invoke(ctx, ProductAttrService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productAttrServiceClient) Delete(ctx context.Context, in *ProductAttrIds, opts ...grpc.CallOption) (*ProductAttrResponse, error) {
	out := new(ProductAttrResponse)
	err := c.cc.Invoke(ctx, ProductAttrService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productAttrServiceClient) FindById(ctx context.Context, in *ProductAttrIds, opts ...grpc.CallOption) (*ProductAttrResponse, error) {
	out := new(ProductAttrResponse)
	err := c.cc.Invoke(ctx, ProductAttrService_FindById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productAttrServiceClient) FindPageList(ctx context.Context, in *ProductAttrPageAuthQuery, opts ...grpc.CallOption) (*ProductAttrResponse, error) {
	out := new(ProductAttrResponse)
	err := c.cc.Invoke(ctx, ProductAttrService_FindPageList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductAttrServiceServer is the server API for ProductAttrService service.
// All implementations must embed UnimplementedProductAttrServiceServer
// for forward compatibility
type ProductAttrServiceServer interface {
	// 新增
	Create(context.Context, *ProductAttr) (*ProductAttrResponse, error)
	// 修改
	Update(context.Context, *ProductAttr) (*ProductAttrResponse, error)
	// 删除
	Delete(context.Context, *ProductAttrIds) (*ProductAttrResponse, error)
	// 查询 详情
	FindById(context.Context, *ProductAttrIds) (*ProductAttrResponse, error)
	// 查询 分页
	FindPageList(context.Context, *ProductAttrPageAuthQuery) (*ProductAttrResponse, error)
	mustEmbedUnimplementedProductAttrServiceServer()
}

// UnimplementedProductAttrServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProductAttrServiceServer struct {
}

func (UnimplementedProductAttrServiceServer) Create(context.Context, *ProductAttr) (*ProductAttrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedProductAttrServiceServer) Update(context.Context, *ProductAttr) (*ProductAttrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedProductAttrServiceServer) Delete(context.Context, *ProductAttrIds) (*ProductAttrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedProductAttrServiceServer) FindById(context.Context, *ProductAttrIds) (*ProductAttrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindById not implemented")
}
func (UnimplementedProductAttrServiceServer) FindPageList(context.Context, *ProductAttrPageAuthQuery) (*ProductAttrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPageList not implemented")
}
func (UnimplementedProductAttrServiceServer) mustEmbedUnimplementedProductAttrServiceServer() {}

// UnsafeProductAttrServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductAttrServiceServer will
// result in compilation errors.
type UnsafeProductAttrServiceServer interface {
	mustEmbedUnimplementedProductAttrServiceServer()
}

func RegisterProductAttrServiceServer(s grpc.ServiceRegistrar, srv ProductAttrServiceServer) {
	s.RegisterService(&ProductAttrService_ServiceDesc, srv)
}

func _ProductAttrService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductAttr)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductAttrServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductAttrService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductAttrServiceServer).Create(ctx, req.(*ProductAttr))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductAttrService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductAttr)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductAttrServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductAttrService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductAttrServiceServer).Update(ctx, req.(*ProductAttr))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductAttrService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductAttrIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductAttrServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductAttrService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductAttrServiceServer).Delete(ctx, req.(*ProductAttrIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductAttrService_FindById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductAttrIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductAttrServiceServer).FindById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductAttrService_FindById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductAttrServiceServer).FindById(ctx, req.(*ProductAttrIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductAttrService_FindPageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductAttrPageAuthQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductAttrServiceServer).FindPageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductAttrService_FindPageList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductAttrServiceServer).FindPageList(ctx, req.(*ProductAttrPageAuthQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductAttrService_ServiceDesc is the grpc.ServiceDesc for ProductAttrService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductAttrService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "template.ProductAttrService",
	HandlerType: (*ProductAttrServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ProductAttrService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ProductAttrService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ProductAttrService_Delete_Handler,
		},
		{
			MethodName: "FindById",
			Handler:    _ProductAttrService_FindById_Handler,
		},
		{
			MethodName: "FindPageList",
			Handler:    _ProductAttrService_FindPageList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/shopping_admin/product_attr.proto",
}
