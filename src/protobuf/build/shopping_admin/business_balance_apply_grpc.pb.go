// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: protos/shopping_admin/business_balance_apply.proto

package shopping_admin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BusinessBalanceApplyService_Create_FullMethodName       = "/template.BusinessBalanceApplyService/Create"
	BusinessBalanceApplyService_Update_FullMethodName       = "/template.BusinessBalanceApplyService/Update"
	BusinessBalanceApplyService_Delete_FullMethodName       = "/template.BusinessBalanceApplyService/Delete"
	BusinessBalanceApplyService_FindById_FullMethodName     = "/template.BusinessBalanceApplyService/FindById"
	BusinessBalanceApplyService_FindPageList_FullMethodName = "/template.BusinessBalanceApplyService/FindPageList"
)

// BusinessBalanceApplyServiceClient is the client API for BusinessBalanceApplyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BusinessBalanceApplyServiceClient interface {
	// 新增
	Create(ctx context.Context, in *BusinessBalanceApply, opts ...grpc.CallOption) (*BusinessBalanceApplyResponse, error)
	// 修改
	Update(ctx context.Context, in *BusinessBalanceApply, opts ...grpc.CallOption) (*BusinessBalanceApplyResponse, error)
	// 删除
	Delete(ctx context.Context, in *BusinessBalanceApplyIds, opts ...grpc.CallOption) (*BusinessBalanceApplyResponse, error)
	// 查询 详情
	FindById(ctx context.Context, in *BusinessBalanceApplyIds, opts ...grpc.CallOption) (*BusinessBalanceApplyResponse, error)
	// 查询 分页
	FindPageList(ctx context.Context, in *BusinessBalanceApplyPageAuthQuery, opts ...grpc.CallOption) (*BusinessBalanceApplyResponse, error)
}

type businessBalanceApplyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBusinessBalanceApplyServiceClient(cc grpc.ClientConnInterface) BusinessBalanceApplyServiceClient {
	return &businessBalanceApplyServiceClient{cc}
}

func (c *businessBalanceApplyServiceClient) Create(ctx context.Context, in *BusinessBalanceApply, opts ...grpc.CallOption) (*BusinessBalanceApplyResponse, error) {
	out := new(BusinessBalanceApplyResponse)
	err := c.cc.Invoke(ctx, BusinessBalanceApplyService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessBalanceApplyServiceClient) Update(ctx context.Context, in *BusinessBalanceApply, opts ...grpc.CallOption) (*BusinessBalanceApplyResponse, error) {
	out := new(BusinessBalanceApplyResponse)
	err := c.cc.Invoke(ctx, BusinessBalanceApplyService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessBalanceApplyServiceClient) Delete(ctx context.Context, in *BusinessBalanceApplyIds, opts ...grpc.CallOption) (*BusinessBalanceApplyResponse, error) {
	out := new(BusinessBalanceApplyResponse)
	err := c.cc.Invoke(ctx, BusinessBalanceApplyService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessBalanceApplyServiceClient) FindById(ctx context.Context, in *BusinessBalanceApplyIds, opts ...grpc.CallOption) (*BusinessBalanceApplyResponse, error) {
	out := new(BusinessBalanceApplyResponse)
	err := c.cc.Invoke(ctx, BusinessBalanceApplyService_FindById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessBalanceApplyServiceClient) FindPageList(ctx context.Context, in *BusinessBalanceApplyPageAuthQuery, opts ...grpc.CallOption) (*BusinessBalanceApplyResponse, error) {
	out := new(BusinessBalanceApplyResponse)
	err := c.cc.Invoke(ctx, BusinessBalanceApplyService_FindPageList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BusinessBalanceApplyServiceServer is the server API for BusinessBalanceApplyService service.
// All implementations must embed UnimplementedBusinessBalanceApplyServiceServer
// for forward compatibility
type BusinessBalanceApplyServiceServer interface {
	// 新增
	Create(context.Context, *BusinessBalanceApply) (*BusinessBalanceApplyResponse, error)
	// 修改
	Update(context.Context, *BusinessBalanceApply) (*BusinessBalanceApplyResponse, error)
	// 删除
	Delete(context.Context, *BusinessBalanceApplyIds) (*BusinessBalanceApplyResponse, error)
	// 查询 详情
	FindById(context.Context, *BusinessBalanceApplyIds) (*BusinessBalanceApplyResponse, error)
	// 查询 分页
	FindPageList(context.Context, *BusinessBalanceApplyPageAuthQuery) (*BusinessBalanceApplyResponse, error)
	mustEmbedUnimplementedBusinessBalanceApplyServiceServer()
}

// UnimplementedBusinessBalanceApplyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBusinessBalanceApplyServiceServer struct {
}

func (UnimplementedBusinessBalanceApplyServiceServer) Create(context.Context, *BusinessBalanceApply) (*BusinessBalanceApplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedBusinessBalanceApplyServiceServer) Update(context.Context, *BusinessBalanceApply) (*BusinessBalanceApplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedBusinessBalanceApplyServiceServer) Delete(context.Context, *BusinessBalanceApplyIds) (*BusinessBalanceApplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedBusinessBalanceApplyServiceServer) FindById(context.Context, *BusinessBalanceApplyIds) (*BusinessBalanceApplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindById not implemented")
}
func (UnimplementedBusinessBalanceApplyServiceServer) FindPageList(context.Context, *BusinessBalanceApplyPageAuthQuery) (*BusinessBalanceApplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPageList not implemented")
}
func (UnimplementedBusinessBalanceApplyServiceServer) mustEmbedUnimplementedBusinessBalanceApplyServiceServer() {
}

// UnsafeBusinessBalanceApplyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BusinessBalanceApplyServiceServer will
// result in compilation errors.
type UnsafeBusinessBalanceApplyServiceServer interface {
	mustEmbedUnimplementedBusinessBalanceApplyServiceServer()
}

func RegisterBusinessBalanceApplyServiceServer(s grpc.ServiceRegistrar, srv BusinessBalanceApplyServiceServer) {
	s.RegisterService(&BusinessBalanceApplyService_ServiceDesc, srv)
}

func _BusinessBalanceApplyService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BusinessBalanceApply)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessBalanceApplyServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BusinessBalanceApplyService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessBalanceApplyServiceServer).Create(ctx, req.(*BusinessBalanceApply))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessBalanceApplyService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BusinessBalanceApply)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessBalanceApplyServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BusinessBalanceApplyService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessBalanceApplyServiceServer).Update(ctx, req.(*BusinessBalanceApply))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessBalanceApplyService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BusinessBalanceApplyIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessBalanceApplyServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BusinessBalanceApplyService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessBalanceApplyServiceServer).Delete(ctx, req.(*BusinessBalanceApplyIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessBalanceApplyService_FindById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BusinessBalanceApplyIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessBalanceApplyServiceServer).FindById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BusinessBalanceApplyService_FindById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessBalanceApplyServiceServer).FindById(ctx, req.(*BusinessBalanceApplyIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessBalanceApplyService_FindPageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BusinessBalanceApplyPageAuthQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessBalanceApplyServiceServer).FindPageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BusinessBalanceApplyService_FindPageList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessBalanceApplyServiceServer).FindPageList(ctx, req.(*BusinessBalanceApplyPageAuthQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// BusinessBalanceApplyService_ServiceDesc is the grpc.ServiceDesc for BusinessBalanceApplyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BusinessBalanceApplyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "template.BusinessBalanceApplyService",
	HandlerType: (*BusinessBalanceApplyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _BusinessBalanceApplyService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _BusinessBalanceApplyService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _BusinessBalanceApplyService_Delete_Handler,
		},
		{
			MethodName: "FindById",
			Handler:    _BusinessBalanceApplyService_FindById_Handler,
		},
		{
			MethodName: "FindPageList",
			Handler:    _BusinessBalanceApplyService_FindPageList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/shopping_admin/business_balance_apply.proto",
}
