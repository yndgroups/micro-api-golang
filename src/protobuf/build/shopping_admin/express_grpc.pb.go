// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: protos/shopping_admin/express.proto

package shopping_admin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ExpressService_Create_FullMethodName       = "/template.ExpressService/Create"
	ExpressService_Update_FullMethodName       = "/template.ExpressService/Update"
	ExpressService_Delete_FullMethodName       = "/template.ExpressService/Delete"
	ExpressService_FindById_FullMethodName     = "/template.ExpressService/FindById"
	ExpressService_FindPageList_FullMethodName = "/template.ExpressService/FindPageList"
)

// ExpressServiceClient is the client API for ExpressService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExpressServiceClient interface {
	// 新增
	Create(ctx context.Context, in *Express, opts ...grpc.CallOption) (*ExpressResponse, error)
	// 修改
	Update(ctx context.Context, in *Express, opts ...grpc.CallOption) (*ExpressResponse, error)
	// 删除
	Delete(ctx context.Context, in *ExpressIds, opts ...grpc.CallOption) (*ExpressResponse, error)
	// 查询 详情
	FindById(ctx context.Context, in *ExpressIds, opts ...grpc.CallOption) (*ExpressResponse, error)
	// 查询 分页
	FindPageList(ctx context.Context, in *ExpressPageAuthQuery, opts ...grpc.CallOption) (*ExpressResponse, error)
}

type expressServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExpressServiceClient(cc grpc.ClientConnInterface) ExpressServiceClient {
	return &expressServiceClient{cc}
}

func (c *expressServiceClient) Create(ctx context.Context, in *Express, opts ...grpc.CallOption) (*ExpressResponse, error) {
	out := new(ExpressResponse)
	err := c.cc.Invoke(ctx, ExpressService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expressServiceClient) Update(ctx context.Context, in *Express, opts ...grpc.CallOption) (*ExpressResponse, error) {
	out := new(ExpressResponse)
	err := c.cc.Invoke(ctx, ExpressService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expressServiceClient) Delete(ctx context.Context, in *ExpressIds, opts ...grpc.CallOption) (*ExpressResponse, error) {
	out := new(ExpressResponse)
	err := c.cc.Invoke(ctx, ExpressService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expressServiceClient) FindById(ctx context.Context, in *ExpressIds, opts ...grpc.CallOption) (*ExpressResponse, error) {
	out := new(ExpressResponse)
	err := c.cc.Invoke(ctx, ExpressService_FindById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expressServiceClient) FindPageList(ctx context.Context, in *ExpressPageAuthQuery, opts ...grpc.CallOption) (*ExpressResponse, error) {
	out := new(ExpressResponse)
	err := c.cc.Invoke(ctx, ExpressService_FindPageList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExpressServiceServer is the server API for ExpressService service.
// All implementations must embed UnimplementedExpressServiceServer
// for forward compatibility
type ExpressServiceServer interface {
	// 新增
	Create(context.Context, *Express) (*ExpressResponse, error)
	// 修改
	Update(context.Context, *Express) (*ExpressResponse, error)
	// 删除
	Delete(context.Context, *ExpressIds) (*ExpressResponse, error)
	// 查询 详情
	FindById(context.Context, *ExpressIds) (*ExpressResponse, error)
	// 查询 分页
	FindPageList(context.Context, *ExpressPageAuthQuery) (*ExpressResponse, error)
	mustEmbedUnimplementedExpressServiceServer()
}

// UnimplementedExpressServiceServer must be embedded to have forward compatible implementations.
type UnimplementedExpressServiceServer struct {
}

func (UnimplementedExpressServiceServer) Create(context.Context, *Express) (*ExpressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedExpressServiceServer) Update(context.Context, *Express) (*ExpressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedExpressServiceServer) Delete(context.Context, *ExpressIds) (*ExpressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedExpressServiceServer) FindById(context.Context, *ExpressIds) (*ExpressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindById not implemented")
}
func (UnimplementedExpressServiceServer) FindPageList(context.Context, *ExpressPageAuthQuery) (*ExpressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPageList not implemented")
}
func (UnimplementedExpressServiceServer) mustEmbedUnimplementedExpressServiceServer() {}

// UnsafeExpressServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExpressServiceServer will
// result in compilation errors.
type UnsafeExpressServiceServer interface {
	mustEmbedUnimplementedExpressServiceServer()
}

func RegisterExpressServiceServer(s grpc.ServiceRegistrar, srv ExpressServiceServer) {
	s.RegisterService(&ExpressService_ServiceDesc, srv)
}

func _ExpressService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Express)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExpressServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExpressService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExpressServiceServer).Create(ctx, req.(*Express))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExpressService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Express)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExpressServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExpressService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExpressServiceServer).Update(ctx, req.(*Express))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExpressService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExpressIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExpressServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExpressService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExpressServiceServer).Delete(ctx, req.(*ExpressIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExpressService_FindById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExpressIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExpressServiceServer).FindById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExpressService_FindById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExpressServiceServer).FindById(ctx, req.(*ExpressIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExpressService_FindPageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExpressPageAuthQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExpressServiceServer).FindPageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExpressService_FindPageList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExpressServiceServer).FindPageList(ctx, req.(*ExpressPageAuthQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// ExpressService_ServiceDesc is the grpc.ServiceDesc for ExpressService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExpressService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "template.ExpressService",
	HandlerType: (*ExpressServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ExpressService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ExpressService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ExpressService_Delete_Handler,
		},
		{
			MethodName: "FindById",
			Handler:    _ExpressService_FindById_Handler,
		},
		{
			MethodName: "FindPageList",
			Handler:    _ExpressService_FindPageList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/shopping_admin/express.proto",
}
