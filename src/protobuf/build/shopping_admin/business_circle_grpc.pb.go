// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: protos/shopping_admin/business_circle.proto

package shopping_admin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BusinessCircleService_Create_FullMethodName       = "/template.BusinessCircleService/Create"
	BusinessCircleService_Update_FullMethodName       = "/template.BusinessCircleService/Update"
	BusinessCircleService_Delete_FullMethodName       = "/template.BusinessCircleService/Delete"
	BusinessCircleService_FindById_FullMethodName     = "/template.BusinessCircleService/FindById"
	BusinessCircleService_FindPageList_FullMethodName = "/template.BusinessCircleService/FindPageList"
)

// BusinessCircleServiceClient is the client API for BusinessCircleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BusinessCircleServiceClient interface {
	// 新增
	Create(ctx context.Context, in *BusinessCircle, opts ...grpc.CallOption) (*BusinessCircleResponse, error)
	// 修改
	Update(ctx context.Context, in *BusinessCircle, opts ...grpc.CallOption) (*BusinessCircleResponse, error)
	// 删除
	Delete(ctx context.Context, in *BusinessCircleIds, opts ...grpc.CallOption) (*BusinessCircleResponse, error)
	// 查询 详情
	FindById(ctx context.Context, in *BusinessCircleIds, opts ...grpc.CallOption) (*BusinessCircleResponse, error)
	// 查询 分页
	FindPageList(ctx context.Context, in *BusinessCirclePageAuthQuery, opts ...grpc.CallOption) (*BusinessCircleResponse, error)
}

type businessCircleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBusinessCircleServiceClient(cc grpc.ClientConnInterface) BusinessCircleServiceClient {
	return &businessCircleServiceClient{cc}
}

func (c *businessCircleServiceClient) Create(ctx context.Context, in *BusinessCircle, opts ...grpc.CallOption) (*BusinessCircleResponse, error) {
	out := new(BusinessCircleResponse)
	err := c.cc.Invoke(ctx, BusinessCircleService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessCircleServiceClient) Update(ctx context.Context, in *BusinessCircle, opts ...grpc.CallOption) (*BusinessCircleResponse, error) {
	out := new(BusinessCircleResponse)
	err := c.cc.Invoke(ctx, BusinessCircleService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessCircleServiceClient) Delete(ctx context.Context, in *BusinessCircleIds, opts ...grpc.CallOption) (*BusinessCircleResponse, error) {
	out := new(BusinessCircleResponse)
	err := c.cc.Invoke(ctx, BusinessCircleService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessCircleServiceClient) FindById(ctx context.Context, in *BusinessCircleIds, opts ...grpc.CallOption) (*BusinessCircleResponse, error) {
	out := new(BusinessCircleResponse)
	err := c.cc.Invoke(ctx, BusinessCircleService_FindById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessCircleServiceClient) FindPageList(ctx context.Context, in *BusinessCirclePageAuthQuery, opts ...grpc.CallOption) (*BusinessCircleResponse, error) {
	out := new(BusinessCircleResponse)
	err := c.cc.Invoke(ctx, BusinessCircleService_FindPageList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BusinessCircleServiceServer is the server API for BusinessCircleService service.
// All implementations must embed UnimplementedBusinessCircleServiceServer
// for forward compatibility
type BusinessCircleServiceServer interface {
	// 新增
	Create(context.Context, *BusinessCircle) (*BusinessCircleResponse, error)
	// 修改
	Update(context.Context, *BusinessCircle) (*BusinessCircleResponse, error)
	// 删除
	Delete(context.Context, *BusinessCircleIds) (*BusinessCircleResponse, error)
	// 查询 详情
	FindById(context.Context, *BusinessCircleIds) (*BusinessCircleResponse, error)
	// 查询 分页
	FindPageList(context.Context, *BusinessCirclePageAuthQuery) (*BusinessCircleResponse, error)
	mustEmbedUnimplementedBusinessCircleServiceServer()
}

// UnimplementedBusinessCircleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBusinessCircleServiceServer struct {
}

func (UnimplementedBusinessCircleServiceServer) Create(context.Context, *BusinessCircle) (*BusinessCircleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedBusinessCircleServiceServer) Update(context.Context, *BusinessCircle) (*BusinessCircleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedBusinessCircleServiceServer) Delete(context.Context, *BusinessCircleIds) (*BusinessCircleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedBusinessCircleServiceServer) FindById(context.Context, *BusinessCircleIds) (*BusinessCircleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindById not implemented")
}
func (UnimplementedBusinessCircleServiceServer) FindPageList(context.Context, *BusinessCirclePageAuthQuery) (*BusinessCircleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPageList not implemented")
}
func (UnimplementedBusinessCircleServiceServer) mustEmbedUnimplementedBusinessCircleServiceServer() {}

// UnsafeBusinessCircleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BusinessCircleServiceServer will
// result in compilation errors.
type UnsafeBusinessCircleServiceServer interface {
	mustEmbedUnimplementedBusinessCircleServiceServer()
}

func RegisterBusinessCircleServiceServer(s grpc.ServiceRegistrar, srv BusinessCircleServiceServer) {
	s.RegisterService(&BusinessCircleService_ServiceDesc, srv)
}

func _BusinessCircleService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BusinessCircle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessCircleServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BusinessCircleService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessCircleServiceServer).Create(ctx, req.(*BusinessCircle))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessCircleService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BusinessCircle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessCircleServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BusinessCircleService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessCircleServiceServer).Update(ctx, req.(*BusinessCircle))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessCircleService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BusinessCircleIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessCircleServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BusinessCircleService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessCircleServiceServer).Delete(ctx, req.(*BusinessCircleIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessCircleService_FindById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BusinessCircleIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessCircleServiceServer).FindById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BusinessCircleService_FindById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessCircleServiceServer).FindById(ctx, req.(*BusinessCircleIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessCircleService_FindPageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BusinessCirclePageAuthQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessCircleServiceServer).FindPageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BusinessCircleService_FindPageList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessCircleServiceServer).FindPageList(ctx, req.(*BusinessCirclePageAuthQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// BusinessCircleService_ServiceDesc is the grpc.ServiceDesc for BusinessCircleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BusinessCircleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "template.BusinessCircleService",
	HandlerType: (*BusinessCircleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _BusinessCircleService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _BusinessCircleService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _BusinessCircleService_Delete_Handler,
		},
		{
			MethodName: "FindById",
			Handler:    _BusinessCircleService_FindById_Handler,
		},
		{
			MethodName: "FindPageList",
			Handler:    _BusinessCircleService_FindPageList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/shopping_admin/business_circle.proto",
}
