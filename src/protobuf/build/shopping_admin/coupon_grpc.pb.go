// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: protos/shopping_admin/coupon.proto

package shopping_admin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CouponService_Create_FullMethodName       = "/template.CouponService/Create"
	CouponService_Update_FullMethodName       = "/template.CouponService/Update"
	CouponService_Delete_FullMethodName       = "/template.CouponService/Delete"
	CouponService_FindById_FullMethodName     = "/template.CouponService/FindById"
	CouponService_FindPageList_FullMethodName = "/template.CouponService/FindPageList"
)

// CouponServiceClient is the client API for CouponService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CouponServiceClient interface {
	// 新增
	Create(ctx context.Context, in *Coupon, opts ...grpc.CallOption) (*CouponResponse, error)
	// 修改
	Update(ctx context.Context, in *Coupon, opts ...grpc.CallOption) (*CouponResponse, error)
	// 删除
	Delete(ctx context.Context, in *CouponIds, opts ...grpc.CallOption) (*CouponResponse, error)
	// 查询 详情
	FindById(ctx context.Context, in *CouponIds, opts ...grpc.CallOption) (*CouponResponse, error)
	// 查询 分页
	FindPageList(ctx context.Context, in *CouponPageAuthQuery, opts ...grpc.CallOption) (*CouponResponse, error)
}

type couponServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCouponServiceClient(cc grpc.ClientConnInterface) CouponServiceClient {
	return &couponServiceClient{cc}
}

func (c *couponServiceClient) Create(ctx context.Context, in *Coupon, opts ...grpc.CallOption) (*CouponResponse, error) {
	out := new(CouponResponse)
	err := c.cc.Invoke(ctx, CouponService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couponServiceClient) Update(ctx context.Context, in *Coupon, opts ...grpc.CallOption) (*CouponResponse, error) {
	out := new(CouponResponse)
	err := c.cc.Invoke(ctx, CouponService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couponServiceClient) Delete(ctx context.Context, in *CouponIds, opts ...grpc.CallOption) (*CouponResponse, error) {
	out := new(CouponResponse)
	err := c.cc.Invoke(ctx, CouponService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couponServiceClient) FindById(ctx context.Context, in *CouponIds, opts ...grpc.CallOption) (*CouponResponse, error) {
	out := new(CouponResponse)
	err := c.cc.Invoke(ctx, CouponService_FindById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couponServiceClient) FindPageList(ctx context.Context, in *CouponPageAuthQuery, opts ...grpc.CallOption) (*CouponResponse, error) {
	out := new(CouponResponse)
	err := c.cc.Invoke(ctx, CouponService_FindPageList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CouponServiceServer is the server API for CouponService service.
// All implementations must embed UnimplementedCouponServiceServer
// for forward compatibility
type CouponServiceServer interface {
	// 新增
	Create(context.Context, *Coupon) (*CouponResponse, error)
	// 修改
	Update(context.Context, *Coupon) (*CouponResponse, error)
	// 删除
	Delete(context.Context, *CouponIds) (*CouponResponse, error)
	// 查询 详情
	FindById(context.Context, *CouponIds) (*CouponResponse, error)
	// 查询 分页
	FindPageList(context.Context, *CouponPageAuthQuery) (*CouponResponse, error)
	mustEmbedUnimplementedCouponServiceServer()
}

// UnimplementedCouponServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCouponServiceServer struct {
}

func (UnimplementedCouponServiceServer) Create(context.Context, *Coupon) (*CouponResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCouponServiceServer) Update(context.Context, *Coupon) (*CouponResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedCouponServiceServer) Delete(context.Context, *CouponIds) (*CouponResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedCouponServiceServer) FindById(context.Context, *CouponIds) (*CouponResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindById not implemented")
}
func (UnimplementedCouponServiceServer) FindPageList(context.Context, *CouponPageAuthQuery) (*CouponResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPageList not implemented")
}
func (UnimplementedCouponServiceServer) mustEmbedUnimplementedCouponServiceServer() {}

// UnsafeCouponServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CouponServiceServer will
// result in compilation errors.
type UnsafeCouponServiceServer interface {
	mustEmbedUnimplementedCouponServiceServer()
}

func RegisterCouponServiceServer(s grpc.ServiceRegistrar, srv CouponServiceServer) {
	s.RegisterService(&CouponService_ServiceDesc, srv)
}

func _CouponService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Coupon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouponService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponServiceServer).Create(ctx, req.(*Coupon))
	}
	return interceptor(ctx, in, info, handler)
}

func _CouponService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Coupon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouponService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponServiceServer).Update(ctx, req.(*Coupon))
	}
	return interceptor(ctx, in, info, handler)
}

func _CouponService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CouponIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouponService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponServiceServer).Delete(ctx, req.(*CouponIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _CouponService_FindById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CouponIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponServiceServer).FindById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouponService_FindById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponServiceServer).FindById(ctx, req.(*CouponIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _CouponService_FindPageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CouponPageAuthQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponServiceServer).FindPageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouponService_FindPageList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponServiceServer).FindPageList(ctx, req.(*CouponPageAuthQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// CouponService_ServiceDesc is the grpc.ServiceDesc for CouponService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CouponService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "template.CouponService",
	HandlerType: (*CouponServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _CouponService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _CouponService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _CouponService_Delete_Handler,
		},
		{
			MethodName: "FindById",
			Handler:    _CouponService_FindById_Handler,
		},
		{
			MethodName: "FindPageList",
			Handler:    _CouponService_FindPageList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/shopping_admin/coupon.proto",
}
