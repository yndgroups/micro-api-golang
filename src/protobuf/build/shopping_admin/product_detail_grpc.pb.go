// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: protos/shopping_admin/product_detail.proto

package shopping_admin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ProductDetailService_Create_FullMethodName       = "/shopping_admin.ProductDetailService/Create"
	ProductDetailService_Update_FullMethodName       = "/shopping_admin.ProductDetailService/Update"
	ProductDetailService_Delete_FullMethodName       = "/shopping_admin.ProductDetailService/Delete"
	ProductDetailService_FindById_FullMethodName     = "/shopping_admin.ProductDetailService/FindById"
	ProductDetailService_FindPageList_FullMethodName = "/shopping_admin.ProductDetailService/FindPageList"
)

// ProductDetailServiceClient is the client API for ProductDetailService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductDetailServiceClient interface {
	// 新增
	Create(ctx context.Context, in *ProductDetail, opts ...grpc.CallOption) (*ProductDetailResponse, error)
	// 修改
	Update(ctx context.Context, in *ProductDetail, opts ...grpc.CallOption) (*ProductDetailResponse, error)
	// 删除
	Delete(ctx context.Context, in *ProductDetailIds, opts ...grpc.CallOption) (*ProductDetailResponse, error)
	// 查询 详情
	FindById(ctx context.Context, in *ProductDetailIds, opts ...grpc.CallOption) (*ProductDetailResponse, error)
	// 查询 分页
	FindPageList(ctx context.Context, in *ProductDetailPageAuthQuery, opts ...grpc.CallOption) (*ProductDetailResponse, error)
}

type productDetailServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductDetailServiceClient(cc grpc.ClientConnInterface) ProductDetailServiceClient {
	return &productDetailServiceClient{cc}
}

func (c *productDetailServiceClient) Create(ctx context.Context, in *ProductDetail, opts ...grpc.CallOption) (*ProductDetailResponse, error) {
	out := new(ProductDetailResponse)
	err := c.cc.Invoke(ctx, ProductDetailService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productDetailServiceClient) Update(ctx context.Context, in *ProductDetail, opts ...grpc.CallOption) (*ProductDetailResponse, error) {
	out := new(ProductDetailResponse)
	err := c.cc.Invoke(ctx, ProductDetailService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productDetailServiceClient) Delete(ctx context.Context, in *ProductDetailIds, opts ...grpc.CallOption) (*ProductDetailResponse, error) {
	out := new(ProductDetailResponse)
	err := c.cc.Invoke(ctx, ProductDetailService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productDetailServiceClient) FindById(ctx context.Context, in *ProductDetailIds, opts ...grpc.CallOption) (*ProductDetailResponse, error) {
	out := new(ProductDetailResponse)
	err := c.cc.Invoke(ctx, ProductDetailService_FindById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productDetailServiceClient) FindPageList(ctx context.Context, in *ProductDetailPageAuthQuery, opts ...grpc.CallOption) (*ProductDetailResponse, error) {
	out := new(ProductDetailResponse)
	err := c.cc.Invoke(ctx, ProductDetailService_FindPageList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductDetailServiceServer is the server API for ProductDetailService service.
// All implementations must embed UnimplementedProductDetailServiceServer
// for forward compatibility
type ProductDetailServiceServer interface {
	// 新增
	Create(context.Context, *ProductDetail) (*ProductDetailResponse, error)
	// 修改
	Update(context.Context, *ProductDetail) (*ProductDetailResponse, error)
	// 删除
	Delete(context.Context, *ProductDetailIds) (*ProductDetailResponse, error)
	// 查询 详情
	FindById(context.Context, *ProductDetailIds) (*ProductDetailResponse, error)
	// 查询 分页
	FindPageList(context.Context, *ProductDetailPageAuthQuery) (*ProductDetailResponse, error)
	mustEmbedUnimplementedProductDetailServiceServer()
}

// UnimplementedProductDetailServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProductDetailServiceServer struct {
}

func (UnimplementedProductDetailServiceServer) Create(context.Context, *ProductDetail) (*ProductDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedProductDetailServiceServer) Update(context.Context, *ProductDetail) (*ProductDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedProductDetailServiceServer) Delete(context.Context, *ProductDetailIds) (*ProductDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedProductDetailServiceServer) FindById(context.Context, *ProductDetailIds) (*ProductDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindById not implemented")
}
func (UnimplementedProductDetailServiceServer) FindPageList(context.Context, *ProductDetailPageAuthQuery) (*ProductDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPageList not implemented")
}
func (UnimplementedProductDetailServiceServer) mustEmbedUnimplementedProductDetailServiceServer() {}

// UnsafeProductDetailServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductDetailServiceServer will
// result in compilation errors.
type UnsafeProductDetailServiceServer interface {
	mustEmbedUnimplementedProductDetailServiceServer()
}

func RegisterProductDetailServiceServer(s grpc.ServiceRegistrar, srv ProductDetailServiceServer) {
	s.RegisterService(&ProductDetailService_ServiceDesc, srv)
}

func _ProductDetailService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductDetail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductDetailServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductDetailService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductDetailServiceServer).Create(ctx, req.(*ProductDetail))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductDetailService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductDetail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductDetailServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductDetailService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductDetailServiceServer).Update(ctx, req.(*ProductDetail))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductDetailService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductDetailIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductDetailServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductDetailService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductDetailServiceServer).Delete(ctx, req.(*ProductDetailIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductDetailService_FindById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductDetailIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductDetailServiceServer).FindById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductDetailService_FindById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductDetailServiceServer).FindById(ctx, req.(*ProductDetailIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductDetailService_FindPageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductDetailPageAuthQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductDetailServiceServer).FindPageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductDetailService_FindPageList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductDetailServiceServer).FindPageList(ctx, req.(*ProductDetailPageAuthQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductDetailService_ServiceDesc is the grpc.ServiceDesc for ProductDetailService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductDetailService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shopping_admin.ProductDetailService",
	HandlerType: (*ProductDetailServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ProductDetailService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ProductDetailService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ProductDetailService_Delete_Handler,
		},
		{
			MethodName: "FindById",
			Handler:    _ProductDetailService_FindById_Handler,
		},
		{
			MethodName: "FindPageList",
			Handler:    _ProductDetailService_FindPageList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/shopping_admin/product_detail.proto",
}
