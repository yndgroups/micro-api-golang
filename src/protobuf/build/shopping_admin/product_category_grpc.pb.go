// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: protos/shopping_admin/product_category.proto

package shopping_admin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ProductCategoryService_Create_FullMethodName             = "/shopping_admin.ProductCategoryService/Create"
	ProductCategoryService_Update_FullMethodName             = "/shopping_admin.ProductCategoryService/Update"
	ProductCategoryService_Delete_FullMethodName             = "/shopping_admin.ProductCategoryService/Delete"
	ProductCategoryService_FindById_FullMethodName           = "/shopping_admin.ProductCategoryService/FindById"
	ProductCategoryService_FindPageList_FullMethodName       = "/shopping_admin.ProductCategoryService/FindPageList"
	ProductCategoryService_FindTreeByParentId_FullMethodName = "/shopping_admin.ProductCategoryService/FindTreeByParentId"
	ProductCategoryService_FindListByParentId_FullMethodName = "/shopping_admin.ProductCategoryService/FindListByParentId"
)

// ProductCategoryServiceClient is the client API for ProductCategoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductCategoryServiceClient interface {
	// 新增
	Create(ctx context.Context, in *ProductCategory, opts ...grpc.CallOption) (*ProductCategoryResponse, error)
	// 修改
	Update(ctx context.Context, in *ProductCategory, opts ...grpc.CallOption) (*ProductCategoryResponse, error)
	// 删除
	Delete(ctx context.Context, in *ProductCategoryIds, opts ...grpc.CallOption) (*ProductCategoryResponse, error)
	// 查询 详情
	FindById(ctx context.Context, in *ProductCategoryIds, opts ...grpc.CallOption) (*ProductCategoryResponse, error)
	// 查询 分页
	FindPageList(ctx context.Context, in *ProductCategoryPageAuthQuery, opts ...grpc.CallOption) (*ProductCategoryResponse, error)
	// 查询树形结构
	FindTreeByParentId(ctx context.Context, in *ProductCategoryIds, opts ...grpc.CallOption) (*ProductCategoryResponse, error)
	// 根据id查询列表
	FindListByParentId(ctx context.Context, in *ProductCategoryIds, opts ...grpc.CallOption) (*ProductCategoryResponse, error)
}

type productCategoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductCategoryServiceClient(cc grpc.ClientConnInterface) ProductCategoryServiceClient {
	return &productCategoryServiceClient{cc}
}

func (c *productCategoryServiceClient) Create(ctx context.Context, in *ProductCategory, opts ...grpc.CallOption) (*ProductCategoryResponse, error) {
	out := new(ProductCategoryResponse)
	err := c.cc.Invoke(ctx, ProductCategoryService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCategoryServiceClient) Update(ctx context.Context, in *ProductCategory, opts ...grpc.CallOption) (*ProductCategoryResponse, error) {
	out := new(ProductCategoryResponse)
	err := c.cc.Invoke(ctx, ProductCategoryService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCategoryServiceClient) Delete(ctx context.Context, in *ProductCategoryIds, opts ...grpc.CallOption) (*ProductCategoryResponse, error) {
	out := new(ProductCategoryResponse)
	err := c.cc.Invoke(ctx, ProductCategoryService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCategoryServiceClient) FindById(ctx context.Context, in *ProductCategoryIds, opts ...grpc.CallOption) (*ProductCategoryResponse, error) {
	out := new(ProductCategoryResponse)
	err := c.cc.Invoke(ctx, ProductCategoryService_FindById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCategoryServiceClient) FindPageList(ctx context.Context, in *ProductCategoryPageAuthQuery, opts ...grpc.CallOption) (*ProductCategoryResponse, error) {
	out := new(ProductCategoryResponse)
	err := c.cc.Invoke(ctx, ProductCategoryService_FindPageList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCategoryServiceClient) FindTreeByParentId(ctx context.Context, in *ProductCategoryIds, opts ...grpc.CallOption) (*ProductCategoryResponse, error) {
	out := new(ProductCategoryResponse)
	err := c.cc.Invoke(ctx, ProductCategoryService_FindTreeByParentId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCategoryServiceClient) FindListByParentId(ctx context.Context, in *ProductCategoryIds, opts ...grpc.CallOption) (*ProductCategoryResponse, error) {
	out := new(ProductCategoryResponse)
	err := c.cc.Invoke(ctx, ProductCategoryService_FindListByParentId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductCategoryServiceServer is the server API for ProductCategoryService service.
// All implementations must embed UnimplementedProductCategoryServiceServer
// for forward compatibility
type ProductCategoryServiceServer interface {
	// 新增
	Create(context.Context, *ProductCategory) (*ProductCategoryResponse, error)
	// 修改
	Update(context.Context, *ProductCategory) (*ProductCategoryResponse, error)
	// 删除
	Delete(context.Context, *ProductCategoryIds) (*ProductCategoryResponse, error)
	// 查询 详情
	FindById(context.Context, *ProductCategoryIds) (*ProductCategoryResponse, error)
	// 查询 分页
	FindPageList(context.Context, *ProductCategoryPageAuthQuery) (*ProductCategoryResponse, error)
	// 查询树形结构
	FindTreeByParentId(context.Context, *ProductCategoryIds) (*ProductCategoryResponse, error)
	// 根据id查询列表
	FindListByParentId(context.Context, *ProductCategoryIds) (*ProductCategoryResponse, error)
	mustEmbedUnimplementedProductCategoryServiceServer()
}

// UnimplementedProductCategoryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProductCategoryServiceServer struct {
}

func (UnimplementedProductCategoryServiceServer) Create(context.Context, *ProductCategory) (*ProductCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedProductCategoryServiceServer) Update(context.Context, *ProductCategory) (*ProductCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedProductCategoryServiceServer) Delete(context.Context, *ProductCategoryIds) (*ProductCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedProductCategoryServiceServer) FindById(context.Context, *ProductCategoryIds) (*ProductCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindById not implemented")
}
func (UnimplementedProductCategoryServiceServer) FindPageList(context.Context, *ProductCategoryPageAuthQuery) (*ProductCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPageList not implemented")
}
func (UnimplementedProductCategoryServiceServer) FindTreeByParentId(context.Context, *ProductCategoryIds) (*ProductCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindTreeByParentId not implemented")
}
func (UnimplementedProductCategoryServiceServer) FindListByParentId(context.Context, *ProductCategoryIds) (*ProductCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindListByParentId not implemented")
}
func (UnimplementedProductCategoryServiceServer) mustEmbedUnimplementedProductCategoryServiceServer() {
}

// UnsafeProductCategoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductCategoryServiceServer will
// result in compilation errors.
type UnsafeProductCategoryServiceServer interface {
	mustEmbedUnimplementedProductCategoryServiceServer()
}

func RegisterProductCategoryServiceServer(s grpc.ServiceRegistrar, srv ProductCategoryServiceServer) {
	s.RegisterService(&ProductCategoryService_ServiceDesc, srv)
}

func _ProductCategoryService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductCategory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCategoryServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductCategoryService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCategoryServiceServer).Create(ctx, req.(*ProductCategory))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCategoryService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductCategory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCategoryServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductCategoryService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCategoryServiceServer).Update(ctx, req.(*ProductCategory))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCategoryService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductCategoryIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCategoryServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductCategoryService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCategoryServiceServer).Delete(ctx, req.(*ProductCategoryIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCategoryService_FindById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductCategoryIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCategoryServiceServer).FindById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductCategoryService_FindById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCategoryServiceServer).FindById(ctx, req.(*ProductCategoryIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCategoryService_FindPageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductCategoryPageAuthQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCategoryServiceServer).FindPageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductCategoryService_FindPageList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCategoryServiceServer).FindPageList(ctx, req.(*ProductCategoryPageAuthQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCategoryService_FindTreeByParentId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductCategoryIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCategoryServiceServer).FindTreeByParentId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductCategoryService_FindTreeByParentId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCategoryServiceServer).FindTreeByParentId(ctx, req.(*ProductCategoryIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCategoryService_FindListByParentId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductCategoryIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCategoryServiceServer).FindListByParentId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductCategoryService_FindListByParentId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCategoryServiceServer).FindListByParentId(ctx, req.(*ProductCategoryIds))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductCategoryService_ServiceDesc is the grpc.ServiceDesc for ProductCategoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductCategoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shopping_admin.ProductCategoryService",
	HandlerType: (*ProductCategoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ProductCategoryService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ProductCategoryService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ProductCategoryService_Delete_Handler,
		},
		{
			MethodName: "FindById",
			Handler:    _ProductCategoryService_FindById_Handler,
		},
		{
			MethodName: "FindPageList",
			Handler:    _ProductCategoryService_FindPageList_Handler,
		},
		{
			MethodName: "FindTreeByParentId",
			Handler:    _ProductCategoryService_FindTreeByParentId_Handler,
		},
		{
			MethodName: "FindListByParentId",
			Handler:    _ProductCategoryService_FindListByParentId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/shopping_admin/product_category.proto",
}
