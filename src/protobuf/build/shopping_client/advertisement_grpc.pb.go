// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: protos/shopping_client/advertisement.proto

package shopping_client

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AdvertisementService_Create_FullMethodName       = "/shopping_client.AdvertisementService/Create"
	AdvertisementService_Update_FullMethodName       = "/shopping_client.AdvertisementService/Update"
	AdvertisementService_Delete_FullMethodName       = "/shopping_client.AdvertisementService/Delete"
	AdvertisementService_FindById_FullMethodName     = "/shopping_client.AdvertisementService/FindById"
	AdvertisementService_FindPageList_FullMethodName = "/shopping_client.AdvertisementService/FindPageList"
)

// AdvertisementServiceClient is the client API for AdvertisementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdvertisementServiceClient interface {
	// 新增
	Create(ctx context.Context, in *Advertisement, opts ...grpc.CallOption) (*AdvertisementResponse, error)
	// 修改
	Update(ctx context.Context, in *Advertisement, opts ...grpc.CallOption) (*AdvertisementResponse, error)
	// 删除
	Delete(ctx context.Context, in *AdvertisementIds, opts ...grpc.CallOption) (*AdvertisementResponse, error)
	// 查询 详情
	FindById(ctx context.Context, in *AdvertisementIds, opts ...grpc.CallOption) (*AdvertisementResponse, error)
	// 查询 分页
	FindPageList(ctx context.Context, in *AdvertisementPageAuthQuery, opts ...grpc.CallOption) (*AdvertisementResponse, error)
}

type advertisementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdvertisementServiceClient(cc grpc.ClientConnInterface) AdvertisementServiceClient {
	return &advertisementServiceClient{cc}
}

func (c *advertisementServiceClient) Create(ctx context.Context, in *Advertisement, opts ...grpc.CallOption) (*AdvertisementResponse, error) {
	out := new(AdvertisementResponse)
	err := c.cc.Invoke(ctx, AdvertisementService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *advertisementServiceClient) Update(ctx context.Context, in *Advertisement, opts ...grpc.CallOption) (*AdvertisementResponse, error) {
	out := new(AdvertisementResponse)
	err := c.cc.Invoke(ctx, AdvertisementService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *advertisementServiceClient) Delete(ctx context.Context, in *AdvertisementIds, opts ...grpc.CallOption) (*AdvertisementResponse, error) {
	out := new(AdvertisementResponse)
	err := c.cc.Invoke(ctx, AdvertisementService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *advertisementServiceClient) FindById(ctx context.Context, in *AdvertisementIds, opts ...grpc.CallOption) (*AdvertisementResponse, error) {
	out := new(AdvertisementResponse)
	err := c.cc.Invoke(ctx, AdvertisementService_FindById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *advertisementServiceClient) FindPageList(ctx context.Context, in *AdvertisementPageAuthQuery, opts ...grpc.CallOption) (*AdvertisementResponse, error) {
	out := new(AdvertisementResponse)
	err := c.cc.Invoke(ctx, AdvertisementService_FindPageList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdvertisementServiceServer is the server API for AdvertisementService service.
// All implementations must embed UnimplementedAdvertisementServiceServer
// for forward compatibility
type AdvertisementServiceServer interface {
	// 新增
	Create(context.Context, *Advertisement) (*AdvertisementResponse, error)
	// 修改
	Update(context.Context, *Advertisement) (*AdvertisementResponse, error)
	// 删除
	Delete(context.Context, *AdvertisementIds) (*AdvertisementResponse, error)
	// 查询 详情
	FindById(context.Context, *AdvertisementIds) (*AdvertisementResponse, error)
	// 查询 分页
	FindPageList(context.Context, *AdvertisementPageAuthQuery) (*AdvertisementResponse, error)
	mustEmbedUnimplementedAdvertisementServiceServer()
}

// UnimplementedAdvertisementServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAdvertisementServiceServer struct {
}

func (UnimplementedAdvertisementServiceServer) Create(context.Context, *Advertisement) (*AdvertisementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedAdvertisementServiceServer) Update(context.Context, *Advertisement) (*AdvertisementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedAdvertisementServiceServer) Delete(context.Context, *AdvertisementIds) (*AdvertisementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedAdvertisementServiceServer) FindById(context.Context, *AdvertisementIds) (*AdvertisementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindById not implemented")
}
func (UnimplementedAdvertisementServiceServer) FindPageList(context.Context, *AdvertisementPageAuthQuery) (*AdvertisementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPageList not implemented")
}
func (UnimplementedAdvertisementServiceServer) mustEmbedUnimplementedAdvertisementServiceServer() {}

// UnsafeAdvertisementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdvertisementServiceServer will
// result in compilation errors.
type UnsafeAdvertisementServiceServer interface {
	mustEmbedUnimplementedAdvertisementServiceServer()
}

func RegisterAdvertisementServiceServer(s grpc.ServiceRegistrar, srv AdvertisementServiceServer) {
	s.RegisterService(&AdvertisementService_ServiceDesc, srv)
}

func _AdvertisementService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Advertisement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdvertisementServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdvertisementService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdvertisementServiceServer).Create(ctx, req.(*Advertisement))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdvertisementService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Advertisement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdvertisementServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdvertisementService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdvertisementServiceServer).Update(ctx, req.(*Advertisement))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdvertisementService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdvertisementIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdvertisementServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdvertisementService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdvertisementServiceServer).Delete(ctx, req.(*AdvertisementIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdvertisementService_FindById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdvertisementIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdvertisementServiceServer).FindById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdvertisementService_FindById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdvertisementServiceServer).FindById(ctx, req.(*AdvertisementIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdvertisementService_FindPageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdvertisementPageAuthQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdvertisementServiceServer).FindPageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdvertisementService_FindPageList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdvertisementServiceServer).FindPageList(ctx, req.(*AdvertisementPageAuthQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// AdvertisementService_ServiceDesc is the grpc.ServiceDesc for AdvertisementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdvertisementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shopping_client.AdvertisementService",
	HandlerType: (*AdvertisementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _AdvertisementService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _AdvertisementService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _AdvertisementService_Delete_Handler,
		},
		{
			MethodName: "FindById",
			Handler:    _AdvertisementService_FindById_Handler,
		},
		{
			MethodName: "FindPageList",
			Handler:    _AdvertisementService_FindPageList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/shopping_client/advertisement.proto",
}
