// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: protos/shopping_client/store_staff.proto

package shopping_client

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StoreStaffService_Create_FullMethodName       = "/shopping_client.StoreStaffService/Create"
	StoreStaffService_Update_FullMethodName       = "/shopping_client.StoreStaffService/Update"
	StoreStaffService_Delete_FullMethodName       = "/shopping_client.StoreStaffService/Delete"
	StoreStaffService_FindPageList_FullMethodName = "/shopping_client.StoreStaffService/FindPageList"
	StoreStaffService_FindById_FullMethodName     = "/shopping_client.StoreStaffService/FindById"
)

// StoreStaffServiceClient is the client API for StoreStaffService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StoreStaffServiceClient interface {
	// 添加员工
	Create(ctx context.Context, in *StoreStaff, opts ...grpc.CallOption) (*StoreStaffResponse, error)
	// 修改员工
	Update(ctx context.Context, in *StoreStaff, opts ...grpc.CallOption) (*StoreStaffResponse, error)
	// 删除员工
	Delete(ctx context.Context, in *StoreStaffIds, opts ...grpc.CallOption) (*StoreStaffResponse, error)
	// 获取员工分页列表
	FindPageList(ctx context.Context, in *StoreStaffPageAuthQuery, opts ...grpc.CallOption) (*StoreStaffResponse, error)
	// 获取员工详情
	FindById(ctx context.Context, in *StoreStaffIds, opts ...grpc.CallOption) (*StoreStaffResponse, error)
}

type storeStaffServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStoreStaffServiceClient(cc grpc.ClientConnInterface) StoreStaffServiceClient {
	return &storeStaffServiceClient{cc}
}

func (c *storeStaffServiceClient) Create(ctx context.Context, in *StoreStaff, opts ...grpc.CallOption) (*StoreStaffResponse, error) {
	out := new(StoreStaffResponse)
	err := c.cc.Invoke(ctx, StoreStaffService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeStaffServiceClient) Update(ctx context.Context, in *StoreStaff, opts ...grpc.CallOption) (*StoreStaffResponse, error) {
	out := new(StoreStaffResponse)
	err := c.cc.Invoke(ctx, StoreStaffService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeStaffServiceClient) Delete(ctx context.Context, in *StoreStaffIds, opts ...grpc.CallOption) (*StoreStaffResponse, error) {
	out := new(StoreStaffResponse)
	err := c.cc.Invoke(ctx, StoreStaffService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeStaffServiceClient) FindPageList(ctx context.Context, in *StoreStaffPageAuthQuery, opts ...grpc.CallOption) (*StoreStaffResponse, error) {
	out := new(StoreStaffResponse)
	err := c.cc.Invoke(ctx, StoreStaffService_FindPageList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeStaffServiceClient) FindById(ctx context.Context, in *StoreStaffIds, opts ...grpc.CallOption) (*StoreStaffResponse, error) {
	out := new(StoreStaffResponse)
	err := c.cc.Invoke(ctx, StoreStaffService_FindById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StoreStaffServiceServer is the server API for StoreStaffService service.
// All implementations must embed UnimplementedStoreStaffServiceServer
// for forward compatibility
type StoreStaffServiceServer interface {
	// 添加员工
	Create(context.Context, *StoreStaff) (*StoreStaffResponse, error)
	// 修改员工
	Update(context.Context, *StoreStaff) (*StoreStaffResponse, error)
	// 删除员工
	Delete(context.Context, *StoreStaffIds) (*StoreStaffResponse, error)
	// 获取员工分页列表
	FindPageList(context.Context, *StoreStaffPageAuthQuery) (*StoreStaffResponse, error)
	// 获取员工详情
	FindById(context.Context, *StoreStaffIds) (*StoreStaffResponse, error)
	mustEmbedUnimplementedStoreStaffServiceServer()
}

// UnimplementedStoreStaffServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStoreStaffServiceServer struct {
}

func (UnimplementedStoreStaffServiceServer) Create(context.Context, *StoreStaff) (*StoreStaffResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedStoreStaffServiceServer) Update(context.Context, *StoreStaff) (*StoreStaffResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedStoreStaffServiceServer) Delete(context.Context, *StoreStaffIds) (*StoreStaffResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedStoreStaffServiceServer) FindPageList(context.Context, *StoreStaffPageAuthQuery) (*StoreStaffResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPageList not implemented")
}
func (UnimplementedStoreStaffServiceServer) FindById(context.Context, *StoreStaffIds) (*StoreStaffResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindById not implemented")
}
func (UnimplementedStoreStaffServiceServer) mustEmbedUnimplementedStoreStaffServiceServer() {}

// UnsafeStoreStaffServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StoreStaffServiceServer will
// result in compilation errors.
type UnsafeStoreStaffServiceServer interface {
	mustEmbedUnimplementedStoreStaffServiceServer()
}

func RegisterStoreStaffServiceServer(s grpc.ServiceRegistrar, srv StoreStaffServiceServer) {
	s.RegisterService(&StoreStaffService_ServiceDesc, srv)
}

func _StoreStaffService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreStaff)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreStaffServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreStaffService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreStaffServiceServer).Create(ctx, req.(*StoreStaff))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreStaffService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreStaff)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreStaffServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreStaffService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreStaffServiceServer).Update(ctx, req.(*StoreStaff))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreStaffService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreStaffIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreStaffServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreStaffService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreStaffServiceServer).Delete(ctx, req.(*StoreStaffIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreStaffService_FindPageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreStaffPageAuthQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreStaffServiceServer).FindPageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreStaffService_FindPageList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreStaffServiceServer).FindPageList(ctx, req.(*StoreStaffPageAuthQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreStaffService_FindById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreStaffIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreStaffServiceServer).FindById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreStaffService_FindById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreStaffServiceServer).FindById(ctx, req.(*StoreStaffIds))
	}
	return interceptor(ctx, in, info, handler)
}

// StoreStaffService_ServiceDesc is the grpc.ServiceDesc for StoreStaffService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StoreStaffService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shopping_client.StoreStaffService",
	HandlerType: (*StoreStaffServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _StoreStaffService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _StoreStaffService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _StoreStaffService_Delete_Handler,
		},
		{
			MethodName: "FindPageList",
			Handler:    _StoreStaffService_FindPageList_Handler,
		},
		{
			MethodName: "FindById",
			Handler:    _StoreStaffService_FindById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/shopping_client/store_staff.proto",
}
