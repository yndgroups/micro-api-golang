// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: protos/order/order.proto

package order

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OrderService_Delete_FullMethodName          = "/order.OrderService/Delete"
	OrderService_FindPageList_FullMethodName    = "/order.OrderService/FindPageList"
	OrderService_FindById_FullMethodName        = "/order.OrderService/FindById"
	OrderService_FindByParams_FullMethodName    = "/order.OrderService/FindByParams"
	OrderService_Save_FullMethodName            = "/order.OrderService/Save"
	OrderService_Update_FullMethodName          = "/order.OrderService/Update"
	OrderService_BalancePayment_FullMethodName  = "/order.OrderService/BalancePayment"
	OrderService_OrderStatistics_FullMethodName = "/order.OrderService/OrderStatistics"
)

// OrderServiceClient is the client API for OrderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderServiceClient interface {
	// Delete 订单删除
	Delete(ctx context.Context, in *OrderIds, opts ...grpc.CallOption) (*OrderResponse, error)
	// FindPageList 查询订单分页列表
	FindPageList(ctx context.Context, in *OrderPageAuthQuery, opts ...grpc.CallOption) (*OrderResponse, error)
	// FindById 查询订单
	FindById(ctx context.Context, in *OrderIds, opts ...grpc.CallOption) (*OrderResponse, error)
	// FindByParams 根据参数查询订单
	FindByParams(ctx context.Context, in *OrderParams, opts ...grpc.CallOption) (*OrderResponse, error)
	// Save 保存订单信息
	Save(ctx context.Context, in *SaveOrder, opts ...grpc.CallOption) (*OrderResponse, error)
	// Update 更新订单状态
	Update(ctx context.Context, in *UpdateOrderParam, opts ...grpc.CallOption) (*OrderResponse, error)
	// BalancePayment 余额支付
	BalancePayment(ctx context.Context, in *OrderIds, opts ...grpc.CallOption) (*OrderResponse, error)
	// OrderStatistics 订单统计
	OrderStatistics(ctx context.Context, in *OrderBaseInfo, opts ...grpc.CallOption) (*OrderResponse, error)
}

type orderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderServiceClient(cc grpc.ClientConnInterface) OrderServiceClient {
	return &orderServiceClient{cc}
}

func (c *orderServiceClient) Delete(ctx context.Context, in *OrderIds, opts ...grpc.CallOption) (*OrderResponse, error) {
	out := new(OrderResponse)
	err := c.cc.Invoke(ctx, OrderService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) FindPageList(ctx context.Context, in *OrderPageAuthQuery, opts ...grpc.CallOption) (*OrderResponse, error) {
	out := new(OrderResponse)
	err := c.cc.Invoke(ctx, OrderService_FindPageList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) FindById(ctx context.Context, in *OrderIds, opts ...grpc.CallOption) (*OrderResponse, error) {
	out := new(OrderResponse)
	err := c.cc.Invoke(ctx, OrderService_FindById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) FindByParams(ctx context.Context, in *OrderParams, opts ...grpc.CallOption) (*OrderResponse, error) {
	out := new(OrderResponse)
	err := c.cc.Invoke(ctx, OrderService_FindByParams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) Save(ctx context.Context, in *SaveOrder, opts ...grpc.CallOption) (*OrderResponse, error) {
	out := new(OrderResponse)
	err := c.cc.Invoke(ctx, OrderService_Save_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) Update(ctx context.Context, in *UpdateOrderParam, opts ...grpc.CallOption) (*OrderResponse, error) {
	out := new(OrderResponse)
	err := c.cc.Invoke(ctx, OrderService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) BalancePayment(ctx context.Context, in *OrderIds, opts ...grpc.CallOption) (*OrderResponse, error) {
	out := new(OrderResponse)
	err := c.cc.Invoke(ctx, OrderService_BalancePayment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) OrderStatistics(ctx context.Context, in *OrderBaseInfo, opts ...grpc.CallOption) (*OrderResponse, error) {
	out := new(OrderResponse)
	err := c.cc.Invoke(ctx, OrderService_OrderStatistics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderServiceServer is the server API for OrderService service.
// All implementations must embed UnimplementedOrderServiceServer
// for forward compatibility
type OrderServiceServer interface {
	// Delete 订单删除
	Delete(context.Context, *OrderIds) (*OrderResponse, error)
	// FindPageList 查询订单分页列表
	FindPageList(context.Context, *OrderPageAuthQuery) (*OrderResponse, error)
	// FindById 查询订单
	FindById(context.Context, *OrderIds) (*OrderResponse, error)
	// FindByParams 根据参数查询订单
	FindByParams(context.Context, *OrderParams) (*OrderResponse, error)
	// Save 保存订单信息
	Save(context.Context, *SaveOrder) (*OrderResponse, error)
	// Update 更新订单状态
	Update(context.Context, *UpdateOrderParam) (*OrderResponse, error)
	// BalancePayment 余额支付
	BalancePayment(context.Context, *OrderIds) (*OrderResponse, error)
	// OrderStatistics 订单统计
	OrderStatistics(context.Context, *OrderBaseInfo) (*OrderResponse, error)
	mustEmbedUnimplementedOrderServiceServer()
}

// UnimplementedOrderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrderServiceServer struct {
}

func (UnimplementedOrderServiceServer) Delete(context.Context, *OrderIds) (*OrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedOrderServiceServer) FindPageList(context.Context, *OrderPageAuthQuery) (*OrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPageList not implemented")
}
func (UnimplementedOrderServiceServer) FindById(context.Context, *OrderIds) (*OrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindById not implemented")
}
func (UnimplementedOrderServiceServer) FindByParams(context.Context, *OrderParams) (*OrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByParams not implemented")
}
func (UnimplementedOrderServiceServer) Save(context.Context, *SaveOrder) (*OrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Save not implemented")
}
func (UnimplementedOrderServiceServer) Update(context.Context, *UpdateOrderParam) (*OrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedOrderServiceServer) BalancePayment(context.Context, *OrderIds) (*OrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BalancePayment not implemented")
}
func (UnimplementedOrderServiceServer) OrderStatistics(context.Context, *OrderBaseInfo) (*OrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderStatistics not implemented")
}
func (UnimplementedOrderServiceServer) mustEmbedUnimplementedOrderServiceServer() {}

// UnsafeOrderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderServiceServer will
// result in compilation errors.
type UnsafeOrderServiceServer interface {
	mustEmbedUnimplementedOrderServiceServer()
}

func RegisterOrderServiceServer(s grpc.ServiceRegistrar, srv OrderServiceServer) {
	s.RegisterService(&OrderService_ServiceDesc, srv)
}

func _OrderService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).Delete(ctx, req.(*OrderIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_FindPageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderPageAuthQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).FindPageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_FindPageList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).FindPageList(ctx, req.(*OrderPageAuthQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_FindById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).FindById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_FindById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).FindById(ctx, req.(*OrderIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_FindByParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).FindByParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_FindByParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).FindByParams(ctx, req.(*OrderParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_Save_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).Save(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_Save_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).Save(ctx, req.(*SaveOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrderParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).Update(ctx, req.(*UpdateOrderParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_BalancePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).BalancePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_BalancePayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).BalancePayment(ctx, req.(*OrderIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_OrderStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderBaseInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).OrderStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_OrderStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).OrderStatistics(ctx, req.(*OrderBaseInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderService_ServiceDesc is the grpc.ServiceDesc for OrderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "order.OrderService",
	HandlerType: (*OrderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Delete",
			Handler:    _OrderService_Delete_Handler,
		},
		{
			MethodName: "FindPageList",
			Handler:    _OrderService_FindPageList_Handler,
		},
		{
			MethodName: "FindById",
			Handler:    _OrderService_FindById_Handler,
		},
		{
			MethodName: "FindByParams",
			Handler:    _OrderService_FindByParams_Handler,
		},
		{
			MethodName: "Save",
			Handler:    _OrderService_Save_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _OrderService_Update_Handler,
		},
		{
			MethodName: "BalancePayment",
			Handler:    _OrderService_BalancePayment_Handler,
		},
		{
			MethodName: "OrderStatistics",
			Handler:    _OrderService_OrderStatistics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/order/order.proto",
}
