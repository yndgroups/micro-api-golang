// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: protos/order/freight_templates.proto

package order

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FreightTemplatesService_Create_FullMethodName       = "/order.FreightTemplatesService/Create"
	FreightTemplatesService_Update_FullMethodName       = "/order.FreightTemplatesService/Update"
	FreightTemplatesService_Delete_FullMethodName       = "/order.FreightTemplatesService/Delete"
	FreightTemplatesService_FindPageList_FullMethodName = "/order.FreightTemplatesService/FindPageList"
	FreightTemplatesService_FindById_FullMethodName     = "/order.FreightTemplatesService/FindById"
)

// FreightTemplatesServiceClient is the client API for FreightTemplatesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FreightTemplatesServiceClient interface {
	// Create 创建模板
	Create(ctx context.Context, in *FreightTemplates, opts ...grpc.CallOption) (*FreightTemplatesResponse, error)
	// Update 修改模板
	Update(ctx context.Context, in *FreightTemplates, opts ...grpc.CallOption) (*FreightTemplatesResponse, error)
	// Delete 删除
	Delete(ctx context.Context, in *FreightTemplateIds, opts ...grpc.CallOption) (*FreightTemplatesResponse, error)
	// 查询分页
	FindPageList(ctx context.Context, in *FreightTemplatesPageAuthQuery, opts ...grpc.CallOption) (*FreightTemplatesResponse, error)
	// 查询详情
	FindById(ctx context.Context, in *FreightTemplateIds, opts ...grpc.CallOption) (*FreightTemplatesResponse, error)
}

type freightTemplatesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFreightTemplatesServiceClient(cc grpc.ClientConnInterface) FreightTemplatesServiceClient {
	return &freightTemplatesServiceClient{cc}
}

func (c *freightTemplatesServiceClient) Create(ctx context.Context, in *FreightTemplates, opts ...grpc.CallOption) (*FreightTemplatesResponse, error) {
	out := new(FreightTemplatesResponse)
	err := c.cc.Invoke(ctx, FreightTemplatesService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *freightTemplatesServiceClient) Update(ctx context.Context, in *FreightTemplates, opts ...grpc.CallOption) (*FreightTemplatesResponse, error) {
	out := new(FreightTemplatesResponse)
	err := c.cc.Invoke(ctx, FreightTemplatesService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *freightTemplatesServiceClient) Delete(ctx context.Context, in *FreightTemplateIds, opts ...grpc.CallOption) (*FreightTemplatesResponse, error) {
	out := new(FreightTemplatesResponse)
	err := c.cc.Invoke(ctx, FreightTemplatesService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *freightTemplatesServiceClient) FindPageList(ctx context.Context, in *FreightTemplatesPageAuthQuery, opts ...grpc.CallOption) (*FreightTemplatesResponse, error) {
	out := new(FreightTemplatesResponse)
	err := c.cc.Invoke(ctx, FreightTemplatesService_FindPageList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *freightTemplatesServiceClient) FindById(ctx context.Context, in *FreightTemplateIds, opts ...grpc.CallOption) (*FreightTemplatesResponse, error) {
	out := new(FreightTemplatesResponse)
	err := c.cc.Invoke(ctx, FreightTemplatesService_FindById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FreightTemplatesServiceServer is the server API for FreightTemplatesService service.
// All implementations must embed UnimplementedFreightTemplatesServiceServer
// for forward compatibility
type FreightTemplatesServiceServer interface {
	// Create 创建模板
	Create(context.Context, *FreightTemplates) (*FreightTemplatesResponse, error)
	// Update 修改模板
	Update(context.Context, *FreightTemplates) (*FreightTemplatesResponse, error)
	// Delete 删除
	Delete(context.Context, *FreightTemplateIds) (*FreightTemplatesResponse, error)
	// 查询分页
	FindPageList(context.Context, *FreightTemplatesPageAuthQuery) (*FreightTemplatesResponse, error)
	// 查询详情
	FindById(context.Context, *FreightTemplateIds) (*FreightTemplatesResponse, error)
	mustEmbedUnimplementedFreightTemplatesServiceServer()
}

// UnimplementedFreightTemplatesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFreightTemplatesServiceServer struct {
}

func (UnimplementedFreightTemplatesServiceServer) Create(context.Context, *FreightTemplates) (*FreightTemplatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedFreightTemplatesServiceServer) Update(context.Context, *FreightTemplates) (*FreightTemplatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedFreightTemplatesServiceServer) Delete(context.Context, *FreightTemplateIds) (*FreightTemplatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedFreightTemplatesServiceServer) FindPageList(context.Context, *FreightTemplatesPageAuthQuery) (*FreightTemplatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPageList not implemented")
}
func (UnimplementedFreightTemplatesServiceServer) FindById(context.Context, *FreightTemplateIds) (*FreightTemplatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindById not implemented")
}
func (UnimplementedFreightTemplatesServiceServer) mustEmbedUnimplementedFreightTemplatesServiceServer() {
}

// UnsafeFreightTemplatesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FreightTemplatesServiceServer will
// result in compilation errors.
type UnsafeFreightTemplatesServiceServer interface {
	mustEmbedUnimplementedFreightTemplatesServiceServer()
}

func RegisterFreightTemplatesServiceServer(s grpc.ServiceRegistrar, srv FreightTemplatesServiceServer) {
	s.RegisterService(&FreightTemplatesService_ServiceDesc, srv)
}

func _FreightTemplatesService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FreightTemplates)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FreightTemplatesServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FreightTemplatesService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FreightTemplatesServiceServer).Create(ctx, req.(*FreightTemplates))
	}
	return interceptor(ctx, in, info, handler)
}

func _FreightTemplatesService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FreightTemplates)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FreightTemplatesServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FreightTemplatesService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FreightTemplatesServiceServer).Update(ctx, req.(*FreightTemplates))
	}
	return interceptor(ctx, in, info, handler)
}

func _FreightTemplatesService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FreightTemplateIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FreightTemplatesServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FreightTemplatesService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FreightTemplatesServiceServer).Delete(ctx, req.(*FreightTemplateIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _FreightTemplatesService_FindPageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FreightTemplatesPageAuthQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FreightTemplatesServiceServer).FindPageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FreightTemplatesService_FindPageList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FreightTemplatesServiceServer).FindPageList(ctx, req.(*FreightTemplatesPageAuthQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _FreightTemplatesService_FindById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FreightTemplateIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FreightTemplatesServiceServer).FindById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FreightTemplatesService_FindById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FreightTemplatesServiceServer).FindById(ctx, req.(*FreightTemplateIds))
	}
	return interceptor(ctx, in, info, handler)
}

// FreightTemplatesService_ServiceDesc is the grpc.ServiceDesc for FreightTemplatesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FreightTemplatesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "order.FreightTemplatesService",
	HandlerType: (*FreightTemplatesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _FreightTemplatesService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _FreightTemplatesService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _FreightTemplatesService_Delete_Handler,
		},
		{
			MethodName: "FindPageList",
			Handler:    _FreightTemplatesService_FindPageList_Handler,
		},
		{
			MethodName: "FindById",
			Handler:    _FreightTemplatesService_FindById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/order/freight_templates.proto",
}
