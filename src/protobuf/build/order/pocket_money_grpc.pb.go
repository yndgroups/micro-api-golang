// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: protos/order/pocket_money.proto

package order

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PocketMoneyService_Create_FullMethodName       = "/order.PocketMoneyService/Create"
	PocketMoneyService_Update_FullMethodName       = "/order.PocketMoneyService/Update"
	PocketMoneyService_FindPageList_FullMethodName = "/order.PocketMoneyService/FindPageList"
	PocketMoneyService_FindById_FullMethodName     = "/order.PocketMoneyService/FindById"
)

// PocketMoneyServiceClient is the client API for PocketMoneyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PocketMoneyServiceClient interface {
	// 创建充值订单
	Create(ctx context.Context, in *PocketMoney, opts ...grpc.CallOption) (*PocketMoneyResponse, error)
	// 更新充值订单
	Update(ctx context.Context, in *PocketMoney, opts ...grpc.CallOption) (*PocketMoneyResponse, error)
	// 查询充值记录分页
	FindPageList(ctx context.Context, in *PocketMoneyPageAuthQuery, opts ...grpc.CallOption) (*PocketMoneyResponse, error)
	// 查询充值订单详情
	FindById(ctx context.Context, in *PocketMoneyIds, opts ...grpc.CallOption) (*PocketMoneyResponse, error)
}

type pocketMoneyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPocketMoneyServiceClient(cc grpc.ClientConnInterface) PocketMoneyServiceClient {
	return &pocketMoneyServiceClient{cc}
}

func (c *pocketMoneyServiceClient) Create(ctx context.Context, in *PocketMoney, opts ...grpc.CallOption) (*PocketMoneyResponse, error) {
	out := new(PocketMoneyResponse)
	err := c.cc.Invoke(ctx, PocketMoneyService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pocketMoneyServiceClient) Update(ctx context.Context, in *PocketMoney, opts ...grpc.CallOption) (*PocketMoneyResponse, error) {
	out := new(PocketMoneyResponse)
	err := c.cc.Invoke(ctx, PocketMoneyService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pocketMoneyServiceClient) FindPageList(ctx context.Context, in *PocketMoneyPageAuthQuery, opts ...grpc.CallOption) (*PocketMoneyResponse, error) {
	out := new(PocketMoneyResponse)
	err := c.cc.Invoke(ctx, PocketMoneyService_FindPageList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pocketMoneyServiceClient) FindById(ctx context.Context, in *PocketMoneyIds, opts ...grpc.CallOption) (*PocketMoneyResponse, error) {
	out := new(PocketMoneyResponse)
	err := c.cc.Invoke(ctx, PocketMoneyService_FindById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PocketMoneyServiceServer is the server API for PocketMoneyService service.
// All implementations must embed UnimplementedPocketMoneyServiceServer
// for forward compatibility
type PocketMoneyServiceServer interface {
	// 创建充值订单
	Create(context.Context, *PocketMoney) (*PocketMoneyResponse, error)
	// 更新充值订单
	Update(context.Context, *PocketMoney) (*PocketMoneyResponse, error)
	// 查询充值记录分页
	FindPageList(context.Context, *PocketMoneyPageAuthQuery) (*PocketMoneyResponse, error)
	// 查询充值订单详情
	FindById(context.Context, *PocketMoneyIds) (*PocketMoneyResponse, error)
	mustEmbedUnimplementedPocketMoneyServiceServer()
}

// UnimplementedPocketMoneyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPocketMoneyServiceServer struct {
}

func (UnimplementedPocketMoneyServiceServer) Create(context.Context, *PocketMoney) (*PocketMoneyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPocketMoneyServiceServer) Update(context.Context, *PocketMoney) (*PocketMoneyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedPocketMoneyServiceServer) FindPageList(context.Context, *PocketMoneyPageAuthQuery) (*PocketMoneyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPageList not implemented")
}
func (UnimplementedPocketMoneyServiceServer) FindById(context.Context, *PocketMoneyIds) (*PocketMoneyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindById not implemented")
}
func (UnimplementedPocketMoneyServiceServer) mustEmbedUnimplementedPocketMoneyServiceServer() {}

// UnsafePocketMoneyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PocketMoneyServiceServer will
// result in compilation errors.
type UnsafePocketMoneyServiceServer interface {
	mustEmbedUnimplementedPocketMoneyServiceServer()
}

func RegisterPocketMoneyServiceServer(s grpc.ServiceRegistrar, srv PocketMoneyServiceServer) {
	s.RegisterService(&PocketMoneyService_ServiceDesc, srv)
}

func _PocketMoneyService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PocketMoney)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PocketMoneyServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PocketMoneyService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PocketMoneyServiceServer).Create(ctx, req.(*PocketMoney))
	}
	return interceptor(ctx, in, info, handler)
}

func _PocketMoneyService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PocketMoney)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PocketMoneyServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PocketMoneyService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PocketMoneyServiceServer).Update(ctx, req.(*PocketMoney))
	}
	return interceptor(ctx, in, info, handler)
}

func _PocketMoneyService_FindPageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PocketMoneyPageAuthQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PocketMoneyServiceServer).FindPageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PocketMoneyService_FindPageList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PocketMoneyServiceServer).FindPageList(ctx, req.(*PocketMoneyPageAuthQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _PocketMoneyService_FindById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PocketMoneyIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PocketMoneyServiceServer).FindById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PocketMoneyService_FindById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PocketMoneyServiceServer).FindById(ctx, req.(*PocketMoneyIds))
	}
	return interceptor(ctx, in, info, handler)
}

// PocketMoneyService_ServiceDesc is the grpc.ServiceDesc for PocketMoneyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PocketMoneyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "order.PocketMoneyService",
	HandlerType: (*PocketMoneyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _PocketMoneyService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _PocketMoneyService_Update_Handler,
		},
		{
			MethodName: "FindPageList",
			Handler:    _PocketMoneyService_FindPageList_Handler,
		},
		{
			MethodName: "FindById",
			Handler:    _PocketMoneyService_FindById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/order/pocket_money.proto",
}
