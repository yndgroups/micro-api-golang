// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: protos/common/mini_app.proto

package common

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MiniAppService_Create_FullMethodName       = "/common.MiniAppService/Create"
	MiniAppService_Update_FullMethodName       = "/common.MiniAppService/Update"
	MiniAppService_Delete_FullMethodName       = "/common.MiniAppService/Delete"
	MiniAppService_FindById_FullMethodName     = "/common.MiniAppService/FindById"
	MiniAppService_FindPageList_FullMethodName = "/common.MiniAppService/FindPageList"
)

// MiniAppServiceClient is the client API for MiniAppService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MiniAppServiceClient interface {
	// 新增小程序
	Create(ctx context.Context, in *MiniApp, opts ...grpc.CallOption) (*MiniAppResponse, error)
	// 修改小程序
	Update(ctx context.Context, in *MiniApp, opts ...grpc.CallOption) (*MiniAppResponse, error)
	// 删除小程序
	Delete(ctx context.Context, in *MiniAppIds, opts ...grpc.CallOption) (*MiniAppResponse, error)
	// 查询小程序详情
	FindById(ctx context.Context, in *MiniAppIds, opts ...grpc.CallOption) (*MiniAppResponse, error)
	// 查询小程序分页
	FindPageList(ctx context.Context, in *MiniAppPageAuthQuery, opts ...grpc.CallOption) (*MiniAppResponse, error)
}

type miniAppServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMiniAppServiceClient(cc grpc.ClientConnInterface) MiniAppServiceClient {
	return &miniAppServiceClient{cc}
}

func (c *miniAppServiceClient) Create(ctx context.Context, in *MiniApp, opts ...grpc.CallOption) (*MiniAppResponse, error) {
	out := new(MiniAppResponse)
	err := c.cc.Invoke(ctx, MiniAppService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miniAppServiceClient) Update(ctx context.Context, in *MiniApp, opts ...grpc.CallOption) (*MiniAppResponse, error) {
	out := new(MiniAppResponse)
	err := c.cc.Invoke(ctx, MiniAppService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miniAppServiceClient) Delete(ctx context.Context, in *MiniAppIds, opts ...grpc.CallOption) (*MiniAppResponse, error) {
	out := new(MiniAppResponse)
	err := c.cc.Invoke(ctx, MiniAppService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miniAppServiceClient) FindById(ctx context.Context, in *MiniAppIds, opts ...grpc.CallOption) (*MiniAppResponse, error) {
	out := new(MiniAppResponse)
	err := c.cc.Invoke(ctx, MiniAppService_FindById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miniAppServiceClient) FindPageList(ctx context.Context, in *MiniAppPageAuthQuery, opts ...grpc.CallOption) (*MiniAppResponse, error) {
	out := new(MiniAppResponse)
	err := c.cc.Invoke(ctx, MiniAppService_FindPageList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MiniAppServiceServer is the server API for MiniAppService service.
// All implementations must embed UnimplementedMiniAppServiceServer
// for forward compatibility
type MiniAppServiceServer interface {
	// 新增小程序
	Create(context.Context, *MiniApp) (*MiniAppResponse, error)
	// 修改小程序
	Update(context.Context, *MiniApp) (*MiniAppResponse, error)
	// 删除小程序
	Delete(context.Context, *MiniAppIds) (*MiniAppResponse, error)
	// 查询小程序详情
	FindById(context.Context, *MiniAppIds) (*MiniAppResponse, error)
	// 查询小程序分页
	FindPageList(context.Context, *MiniAppPageAuthQuery) (*MiniAppResponse, error)
	mustEmbedUnimplementedMiniAppServiceServer()
}

// UnimplementedMiniAppServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMiniAppServiceServer struct {
}

func (UnimplementedMiniAppServiceServer) Create(context.Context, *MiniApp) (*MiniAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedMiniAppServiceServer) Update(context.Context, *MiniApp) (*MiniAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedMiniAppServiceServer) Delete(context.Context, *MiniAppIds) (*MiniAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedMiniAppServiceServer) FindById(context.Context, *MiniAppIds) (*MiniAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindById not implemented")
}
func (UnimplementedMiniAppServiceServer) FindPageList(context.Context, *MiniAppPageAuthQuery) (*MiniAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPageList not implemented")
}
func (UnimplementedMiniAppServiceServer) mustEmbedUnimplementedMiniAppServiceServer() {}

// UnsafeMiniAppServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MiniAppServiceServer will
// result in compilation errors.
type UnsafeMiniAppServiceServer interface {
	mustEmbedUnimplementedMiniAppServiceServer()
}

func RegisterMiniAppServiceServer(s grpc.ServiceRegistrar, srv MiniAppServiceServer) {
	s.RegisterService(&MiniAppService_ServiceDesc, srv)
}

func _MiniAppService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MiniApp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiniAppServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MiniAppService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiniAppServiceServer).Create(ctx, req.(*MiniApp))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiniAppService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MiniApp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiniAppServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MiniAppService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiniAppServiceServer).Update(ctx, req.(*MiniApp))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiniAppService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MiniAppIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiniAppServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MiniAppService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiniAppServiceServer).Delete(ctx, req.(*MiniAppIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiniAppService_FindById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MiniAppIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiniAppServiceServer).FindById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MiniAppService_FindById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiniAppServiceServer).FindById(ctx, req.(*MiniAppIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiniAppService_FindPageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MiniAppPageAuthQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiniAppServiceServer).FindPageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MiniAppService_FindPageList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiniAppServiceServer).FindPageList(ctx, req.(*MiniAppPageAuthQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// MiniAppService_ServiceDesc is the grpc.ServiceDesc for MiniAppService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MiniAppService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "common.MiniAppService",
	HandlerType: (*MiniAppServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _MiniAppService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _MiniAppService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _MiniAppService_Delete_Handler,
		},
		{
			MethodName: "FindById",
			Handler:    _MiniAppService_FindById_Handler,
		},
		{
			MethodName: "FindPageList",
			Handler:    _MiniAppService_FindPageList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/common/mini_app.proto",
}
