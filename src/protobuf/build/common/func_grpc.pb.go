// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: protos/common/func.proto

package common

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SysFuncService_Create_FullMethodName                = "/common.SysFuncService/Create"
	SysFuncService_Update_FullMethodName                = "/common.SysFuncService/Update"
	SysFuncService_Delete_FullMethodName                = "/common.SysFuncService/Delete"
	SysFuncService_FindById_FullMethodName              = "/common.SysFuncService/FindById"
	SysFuncService_FindList_FullMethodName              = "/common.SysFuncService/FindList"
	SysFuncService_FindFuncInfoByRoleIds_FullMethodName = "/common.SysFuncService/FindFuncInfoByRoleIds"
)

// SysFuncServiceClient is the client API for SysFuncService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SysFuncServiceClient interface {
	// 新增
	Create(ctx context.Context, in *SysFunc, opts ...grpc.CallOption) (*SysFuncResponse, error)
	// 修改
	Update(ctx context.Context, in *SysFunc, opts ...grpc.CallOption) (*SysFuncResponse, error)
	// 删除
	Delete(ctx context.Context, in *SysFuncIds, opts ...grpc.CallOption) (*SysFuncResponse, error)
	// 查询详情
	FindById(ctx context.Context, in *SysFuncIds, opts ...grpc.CallOption) (*SysFuncResponse, error)
	// 查询列表
	FindList(ctx context.Context, in *SysFuncAuthQuery, opts ...grpc.CallOption) (*SysFuncResponse, error)
	// 角色管理功能
	FindFuncInfoByRoleIds(ctx context.Context, in *RoleFuncParam, opts ...grpc.CallOption) (*SysFuncResponse, error)
}

type sysFuncServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSysFuncServiceClient(cc grpc.ClientConnInterface) SysFuncServiceClient {
	return &sysFuncServiceClient{cc}
}

func (c *sysFuncServiceClient) Create(ctx context.Context, in *SysFunc, opts ...grpc.CallOption) (*SysFuncResponse, error) {
	out := new(SysFuncResponse)
	err := c.cc.Invoke(ctx, SysFuncService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysFuncServiceClient) Update(ctx context.Context, in *SysFunc, opts ...grpc.CallOption) (*SysFuncResponse, error) {
	out := new(SysFuncResponse)
	err := c.cc.Invoke(ctx, SysFuncService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysFuncServiceClient) Delete(ctx context.Context, in *SysFuncIds, opts ...grpc.CallOption) (*SysFuncResponse, error) {
	out := new(SysFuncResponse)
	err := c.cc.Invoke(ctx, SysFuncService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysFuncServiceClient) FindById(ctx context.Context, in *SysFuncIds, opts ...grpc.CallOption) (*SysFuncResponse, error) {
	out := new(SysFuncResponse)
	err := c.cc.Invoke(ctx, SysFuncService_FindById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysFuncServiceClient) FindList(ctx context.Context, in *SysFuncAuthQuery, opts ...grpc.CallOption) (*SysFuncResponse, error) {
	out := new(SysFuncResponse)
	err := c.cc.Invoke(ctx, SysFuncService_FindList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysFuncServiceClient) FindFuncInfoByRoleIds(ctx context.Context, in *RoleFuncParam, opts ...grpc.CallOption) (*SysFuncResponse, error) {
	out := new(SysFuncResponse)
	err := c.cc.Invoke(ctx, SysFuncService_FindFuncInfoByRoleIds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SysFuncServiceServer is the server API for SysFuncService service.
// All implementations must embed UnimplementedSysFuncServiceServer
// for forward compatibility
type SysFuncServiceServer interface {
	// 新增
	Create(context.Context, *SysFunc) (*SysFuncResponse, error)
	// 修改
	Update(context.Context, *SysFunc) (*SysFuncResponse, error)
	// 删除
	Delete(context.Context, *SysFuncIds) (*SysFuncResponse, error)
	// 查询详情
	FindById(context.Context, *SysFuncIds) (*SysFuncResponse, error)
	// 查询列表
	FindList(context.Context, *SysFuncAuthQuery) (*SysFuncResponse, error)
	// 角色管理功能
	FindFuncInfoByRoleIds(context.Context, *RoleFuncParam) (*SysFuncResponse, error)
	mustEmbedUnimplementedSysFuncServiceServer()
}

// UnimplementedSysFuncServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSysFuncServiceServer struct {
}

func (UnimplementedSysFuncServiceServer) Create(context.Context, *SysFunc) (*SysFuncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedSysFuncServiceServer) Update(context.Context, *SysFunc) (*SysFuncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedSysFuncServiceServer) Delete(context.Context, *SysFuncIds) (*SysFuncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedSysFuncServiceServer) FindById(context.Context, *SysFuncIds) (*SysFuncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindById not implemented")
}
func (UnimplementedSysFuncServiceServer) FindList(context.Context, *SysFuncAuthQuery) (*SysFuncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindList not implemented")
}
func (UnimplementedSysFuncServiceServer) FindFuncInfoByRoleIds(context.Context, *RoleFuncParam) (*SysFuncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindFuncInfoByRoleIds not implemented")
}
func (UnimplementedSysFuncServiceServer) mustEmbedUnimplementedSysFuncServiceServer() {}

// UnsafeSysFuncServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SysFuncServiceServer will
// result in compilation errors.
type UnsafeSysFuncServiceServer interface {
	mustEmbedUnimplementedSysFuncServiceServer()
}

func RegisterSysFuncServiceServer(s grpc.ServiceRegistrar, srv SysFuncServiceServer) {
	s.RegisterService(&SysFuncService_ServiceDesc, srv)
}

func _SysFuncService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysFunc)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysFuncServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysFuncService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysFuncServiceServer).Create(ctx, req.(*SysFunc))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysFuncService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysFunc)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysFuncServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysFuncService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysFuncServiceServer).Update(ctx, req.(*SysFunc))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysFuncService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysFuncIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysFuncServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysFuncService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysFuncServiceServer).Delete(ctx, req.(*SysFuncIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysFuncService_FindById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysFuncIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysFuncServiceServer).FindById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysFuncService_FindById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysFuncServiceServer).FindById(ctx, req.(*SysFuncIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysFuncService_FindList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysFuncAuthQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysFuncServiceServer).FindList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysFuncService_FindList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysFuncServiceServer).FindList(ctx, req.(*SysFuncAuthQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysFuncService_FindFuncInfoByRoleIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleFuncParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysFuncServiceServer).FindFuncInfoByRoleIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysFuncService_FindFuncInfoByRoleIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysFuncServiceServer).FindFuncInfoByRoleIds(ctx, req.(*RoleFuncParam))
	}
	return interceptor(ctx, in, info, handler)
}

// SysFuncService_ServiceDesc is the grpc.ServiceDesc for SysFuncService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SysFuncService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "common.SysFuncService",
	HandlerType: (*SysFuncServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _SysFuncService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _SysFuncService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _SysFuncService_Delete_Handler,
		},
		{
			MethodName: "FindById",
			Handler:    _SysFuncService_FindById_Handler,
		},
		{
			MethodName: "FindList",
			Handler:    _SysFuncService_FindList_Handler,
		},
		{
			MethodName: "FindFuncInfoByRoleIds",
			Handler:    _SysFuncService_FindFuncInfoByRoleIds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/common/func.proto",
}
