// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: protos/common/user_detail.proto

package common

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserDetailService_Create_FullMethodName                = "/order.UserDetailService/Create"
	UserDetailService_Update_FullMethodName                = "/order.UserDetailService/Update"
	UserDetailService_FindById_FullMethodName              = "/order.UserDetailService/FindById"
	UserDetailService_FindBalanceByUserId_FullMethodName   = "/order.UserDetailService/FindBalanceByUserId"
	UserDetailService_UpdateBalanceByUserId_FullMethodName = "/order.UserDetailService/UpdateBalanceByUserId"
	UserDetailService_UpdatePaymentPassword_FullMethodName = "/order.UserDetailService/UpdatePaymentPassword"
)

// UserDetailServiceClient is the client API for UserDetailService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserDetailServiceClient interface {
	// 新增用户基础信息
	Create(ctx context.Context, in *UserDetail, opts ...grpc.CallOption) (*UserDetailResponse, error)
	// 修改用户基础信息
	Update(ctx context.Context, in *UserDetail, opts ...grpc.CallOption) (*UserDetailResponse, error)
	// 查询用户基础信息
	FindById(ctx context.Context, in *UserDetailIds, opts ...grpc.CallOption) (*UserDetailResponse, error)
	// 查询用户余额
	FindBalanceByUserId(ctx context.Context, in *UserDetailIds, opts ...grpc.CallOption) (*UserDetailResponse, error)
	// 查询用户余额
	UpdateBalanceByUserId(ctx context.Context, in *UserBalance, opts ...grpc.CallOption) (*UserDetailResponse, error)
	// 设置支付密码
	UpdatePaymentPassword(ctx context.Context, in *PaymentPassword, opts ...grpc.CallOption) (*UserDetailResponse, error)
}

type userDetailServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserDetailServiceClient(cc grpc.ClientConnInterface) UserDetailServiceClient {
	return &userDetailServiceClient{cc}
}

func (c *userDetailServiceClient) Create(ctx context.Context, in *UserDetail, opts ...grpc.CallOption) (*UserDetailResponse, error) {
	out := new(UserDetailResponse)
	err := c.cc.Invoke(ctx, UserDetailService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDetailServiceClient) Update(ctx context.Context, in *UserDetail, opts ...grpc.CallOption) (*UserDetailResponse, error) {
	out := new(UserDetailResponse)
	err := c.cc.Invoke(ctx, UserDetailService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDetailServiceClient) FindById(ctx context.Context, in *UserDetailIds, opts ...grpc.CallOption) (*UserDetailResponse, error) {
	out := new(UserDetailResponse)
	err := c.cc.Invoke(ctx, UserDetailService_FindById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDetailServiceClient) FindBalanceByUserId(ctx context.Context, in *UserDetailIds, opts ...grpc.CallOption) (*UserDetailResponse, error) {
	out := new(UserDetailResponse)
	err := c.cc.Invoke(ctx, UserDetailService_FindBalanceByUserId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDetailServiceClient) UpdateBalanceByUserId(ctx context.Context, in *UserBalance, opts ...grpc.CallOption) (*UserDetailResponse, error) {
	out := new(UserDetailResponse)
	err := c.cc.Invoke(ctx, UserDetailService_UpdateBalanceByUserId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDetailServiceClient) UpdatePaymentPassword(ctx context.Context, in *PaymentPassword, opts ...grpc.CallOption) (*UserDetailResponse, error) {
	out := new(UserDetailResponse)
	err := c.cc.Invoke(ctx, UserDetailService_UpdatePaymentPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserDetailServiceServer is the server API for UserDetailService service.
// All implementations must embed UnimplementedUserDetailServiceServer
// for forward compatibility
type UserDetailServiceServer interface {
	// 新增用户基础信息
	Create(context.Context, *UserDetail) (*UserDetailResponse, error)
	// 修改用户基础信息
	Update(context.Context, *UserDetail) (*UserDetailResponse, error)
	// 查询用户基础信息
	FindById(context.Context, *UserDetailIds) (*UserDetailResponse, error)
	// 查询用户余额
	FindBalanceByUserId(context.Context, *UserDetailIds) (*UserDetailResponse, error)
	// 查询用户余额
	UpdateBalanceByUserId(context.Context, *UserBalance) (*UserDetailResponse, error)
	// 设置支付密码
	UpdatePaymentPassword(context.Context, *PaymentPassword) (*UserDetailResponse, error)
	mustEmbedUnimplementedUserDetailServiceServer()
}

// UnimplementedUserDetailServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserDetailServiceServer struct {
}

func (UnimplementedUserDetailServiceServer) Create(context.Context, *UserDetail) (*UserDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedUserDetailServiceServer) Update(context.Context, *UserDetail) (*UserDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedUserDetailServiceServer) FindById(context.Context, *UserDetailIds) (*UserDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindById not implemented")
}
func (UnimplementedUserDetailServiceServer) FindBalanceByUserId(context.Context, *UserDetailIds) (*UserDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindBalanceByUserId not implemented")
}
func (UnimplementedUserDetailServiceServer) UpdateBalanceByUserId(context.Context, *UserBalance) (*UserDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBalanceByUserId not implemented")
}
func (UnimplementedUserDetailServiceServer) UpdatePaymentPassword(context.Context, *PaymentPassword) (*UserDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePaymentPassword not implemented")
}
func (UnimplementedUserDetailServiceServer) mustEmbedUnimplementedUserDetailServiceServer() {}

// UnsafeUserDetailServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserDetailServiceServer will
// result in compilation errors.
type UnsafeUserDetailServiceServer interface {
	mustEmbedUnimplementedUserDetailServiceServer()
}

func RegisterUserDetailServiceServer(s grpc.ServiceRegistrar, srv UserDetailServiceServer) {
	s.RegisterService(&UserDetailService_ServiceDesc, srv)
}

func _UserDetailService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDetail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDetailServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserDetailService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDetailServiceServer).Create(ctx, req.(*UserDetail))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDetailService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDetail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDetailServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserDetailService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDetailServiceServer).Update(ctx, req.(*UserDetail))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDetailService_FindById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDetailIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDetailServiceServer).FindById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserDetailService_FindById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDetailServiceServer).FindById(ctx, req.(*UserDetailIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDetailService_FindBalanceByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDetailIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDetailServiceServer).FindBalanceByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserDetailService_FindBalanceByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDetailServiceServer).FindBalanceByUserId(ctx, req.(*UserDetailIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDetailService_UpdateBalanceByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserBalance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDetailServiceServer).UpdateBalanceByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserDetailService_UpdateBalanceByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDetailServiceServer).UpdateBalanceByUserId(ctx, req.(*UserBalance))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDetailService_UpdatePaymentPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentPassword)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDetailServiceServer).UpdatePaymentPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserDetailService_UpdatePaymentPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDetailServiceServer).UpdatePaymentPassword(ctx, req.(*PaymentPassword))
	}
	return interceptor(ctx, in, info, handler)
}

// UserDetailService_ServiceDesc is the grpc.ServiceDesc for UserDetailService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserDetailService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "order.UserDetailService",
	HandlerType: (*UserDetailServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _UserDetailService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _UserDetailService_Update_Handler,
		},
		{
			MethodName: "FindById",
			Handler:    _UserDetailService_FindById_Handler,
		},
		{
			MethodName: "FindBalanceByUserId",
			Handler:    _UserDetailService_FindBalanceByUserId_Handler,
		},
		{
			MethodName: "UpdateBalanceByUserId",
			Handler:    _UserDetailService_UpdateBalanceByUserId_Handler,
		},
		{
			MethodName: "UpdatePaymentPassword",
			Handler:    _UserDetailService_UpdatePaymentPassword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/common/user_detail.proto",
}
