// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: protos/common/enum.proto

package common

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EnumService_Create_FullMethodName       = "/common.EnumService/Create"
	EnumService_Update_FullMethodName       = "/common.EnumService/Update"
	EnumService_Delete_FullMethodName       = "/common.EnumService/Delete"
	EnumService_FindById_FullMethodName     = "/common.EnumService/FindById"
	EnumService_FindPageList_FullMethodName = "/common.EnumService/FindPageList"
)

// EnumServiceClient is the client API for EnumService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EnumServiceClient interface {
	// 新增
	Create(ctx context.Context, in *Enum, opts ...grpc.CallOption) (*EnumResponse, error)
	// 修改
	Update(ctx context.Context, in *Enum, opts ...grpc.CallOption) (*EnumResponse, error)
	// 删除
	Delete(ctx context.Context, in *EnumIds, opts ...grpc.CallOption) (*EnumResponse, error)
	// 查询 详情
	FindById(ctx context.Context, in *EnumIds, opts ...grpc.CallOption) (*EnumResponse, error)
	// 查询 分页
	FindPageList(ctx context.Context, in *EnumPageAuthQuery, opts ...grpc.CallOption) (*EnumResponse, error)
}

type enumServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEnumServiceClient(cc grpc.ClientConnInterface) EnumServiceClient {
	return &enumServiceClient{cc}
}

func (c *enumServiceClient) Create(ctx context.Context, in *Enum, opts ...grpc.CallOption) (*EnumResponse, error) {
	out := new(EnumResponse)
	err := c.cc.Invoke(ctx, EnumService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enumServiceClient) Update(ctx context.Context, in *Enum, opts ...grpc.CallOption) (*EnumResponse, error) {
	out := new(EnumResponse)
	err := c.cc.Invoke(ctx, EnumService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enumServiceClient) Delete(ctx context.Context, in *EnumIds, opts ...grpc.CallOption) (*EnumResponse, error) {
	out := new(EnumResponse)
	err := c.cc.Invoke(ctx, EnumService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enumServiceClient) FindById(ctx context.Context, in *EnumIds, opts ...grpc.CallOption) (*EnumResponse, error) {
	out := new(EnumResponse)
	err := c.cc.Invoke(ctx, EnumService_FindById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enumServiceClient) FindPageList(ctx context.Context, in *EnumPageAuthQuery, opts ...grpc.CallOption) (*EnumResponse, error) {
	out := new(EnumResponse)
	err := c.cc.Invoke(ctx, EnumService_FindPageList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnumServiceServer is the server API for EnumService service.
// All implementations must embed UnimplementedEnumServiceServer
// for forward compatibility
type EnumServiceServer interface {
	// 新增
	Create(context.Context, *Enum) (*EnumResponse, error)
	// 修改
	Update(context.Context, *Enum) (*EnumResponse, error)
	// 删除
	Delete(context.Context, *EnumIds) (*EnumResponse, error)
	// 查询 详情
	FindById(context.Context, *EnumIds) (*EnumResponse, error)
	// 查询 分页
	FindPageList(context.Context, *EnumPageAuthQuery) (*EnumResponse, error)
	mustEmbedUnimplementedEnumServiceServer()
}

// UnimplementedEnumServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEnumServiceServer struct {
}

func (UnimplementedEnumServiceServer) Create(context.Context, *Enum) (*EnumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedEnumServiceServer) Update(context.Context, *Enum) (*EnumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedEnumServiceServer) Delete(context.Context, *EnumIds) (*EnumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedEnumServiceServer) FindById(context.Context, *EnumIds) (*EnumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindById not implemented")
}
func (UnimplementedEnumServiceServer) FindPageList(context.Context, *EnumPageAuthQuery) (*EnumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPageList not implemented")
}
func (UnimplementedEnumServiceServer) mustEmbedUnimplementedEnumServiceServer() {}

// UnsafeEnumServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnumServiceServer will
// result in compilation errors.
type UnsafeEnumServiceServer interface {
	mustEmbedUnimplementedEnumServiceServer()
}

func RegisterEnumServiceServer(s grpc.ServiceRegistrar, srv EnumServiceServer) {
	s.RegisterService(&EnumService_ServiceDesc, srv)
}

func _EnumService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Enum)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnumServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnumService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnumServiceServer).Create(ctx, req.(*Enum))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnumService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Enum)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnumServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnumService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnumServiceServer).Update(ctx, req.(*Enum))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnumService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnumIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnumServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnumService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnumServiceServer).Delete(ctx, req.(*EnumIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnumService_FindById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnumIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnumServiceServer).FindById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnumService_FindById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnumServiceServer).FindById(ctx, req.(*EnumIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnumService_FindPageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnumPageAuthQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnumServiceServer).FindPageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnumService_FindPageList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnumServiceServer).FindPageList(ctx, req.(*EnumPageAuthQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// EnumService_ServiceDesc is the grpc.ServiceDesc for EnumService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EnumService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "common.EnumService",
	HandlerType: (*EnumServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _EnumService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _EnumService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _EnumService_Delete_Handler,
		},
		{
			MethodName: "FindById",
			Handler:    _EnumService_FindById_Handler,
		},
		{
			MethodName: "FindPageList",
			Handler:    _EnumService_FindPageList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/common/enum.proto",
}
