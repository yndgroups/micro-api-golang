// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: protos/common/menu.proto

package common

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MenuService_Create_FullMethodName        = "/common.MenuService/Create"
	MenuService_Update_FullMethodName        = "/common.MenuService/Update"
	MenuService_Delete_FullMethodName        = "/common.MenuService/Delete"
	MenuService_FindAll_FullMethodName       = "/common.MenuService/FindAll"
	MenuService_FindByRoleIds_FullMethodName = "/common.MenuService/FindByRoleIds"
	MenuService_FindTreeList_FullMethodName  = "/common.MenuService/FindTreeList"
)

// MenuServiceClient is the client API for MenuService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MenuServiceClient interface {
	// 新增菜单
	Create(ctx context.Context, in *Menu, opts ...grpc.CallOption) (*MenuResponse, error)
	// 修改菜单
	Update(ctx context.Context, in *Menu, opts ...grpc.CallOption) (*MenuResponse, error)
	// 修改菜单
	Delete(ctx context.Context, in *MenuIds, opts ...grpc.CallOption) (*MenuResponse, error)
	// 查询应用下的所有菜单
	FindAll(ctx context.Context, in *RoleMenuParam, opts ...grpc.CallOption) (*MenuResponse, error)
	// 根据角色Id查询菜单信息
	FindByRoleIds(ctx context.Context, in *RoleMenuParam, opts ...grpc.CallOption) (*MenuResponse, error)
	// 查询用户♾️权限的菜单
	FindTreeList(ctx context.Context, in *RoleMenuParam, opts ...grpc.CallOption) (*MenuResponse, error)
}

type menuServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMenuServiceClient(cc grpc.ClientConnInterface) MenuServiceClient {
	return &menuServiceClient{cc}
}

func (c *menuServiceClient) Create(ctx context.Context, in *Menu, opts ...grpc.CallOption) (*MenuResponse, error) {
	out := new(MenuResponse)
	err := c.cc.Invoke(ctx, MenuService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuServiceClient) Update(ctx context.Context, in *Menu, opts ...grpc.CallOption) (*MenuResponse, error) {
	out := new(MenuResponse)
	err := c.cc.Invoke(ctx, MenuService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuServiceClient) Delete(ctx context.Context, in *MenuIds, opts ...grpc.CallOption) (*MenuResponse, error) {
	out := new(MenuResponse)
	err := c.cc.Invoke(ctx, MenuService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuServiceClient) FindAll(ctx context.Context, in *RoleMenuParam, opts ...grpc.CallOption) (*MenuResponse, error) {
	out := new(MenuResponse)
	err := c.cc.Invoke(ctx, MenuService_FindAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuServiceClient) FindByRoleIds(ctx context.Context, in *RoleMenuParam, opts ...grpc.CallOption) (*MenuResponse, error) {
	out := new(MenuResponse)
	err := c.cc.Invoke(ctx, MenuService_FindByRoleIds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuServiceClient) FindTreeList(ctx context.Context, in *RoleMenuParam, opts ...grpc.CallOption) (*MenuResponse, error) {
	out := new(MenuResponse)
	err := c.cc.Invoke(ctx, MenuService_FindTreeList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MenuServiceServer is the server API for MenuService service.
// All implementations must embed UnimplementedMenuServiceServer
// for forward compatibility
type MenuServiceServer interface {
	// 新增菜单
	Create(context.Context, *Menu) (*MenuResponse, error)
	// 修改菜单
	Update(context.Context, *Menu) (*MenuResponse, error)
	// 修改菜单
	Delete(context.Context, *MenuIds) (*MenuResponse, error)
	// 查询应用下的所有菜单
	FindAll(context.Context, *RoleMenuParam) (*MenuResponse, error)
	// 根据角色Id查询菜单信息
	FindByRoleIds(context.Context, *RoleMenuParam) (*MenuResponse, error)
	// 查询用户♾️权限的菜单
	FindTreeList(context.Context, *RoleMenuParam) (*MenuResponse, error)
	mustEmbedUnimplementedMenuServiceServer()
}

// UnimplementedMenuServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMenuServiceServer struct {
}

func (UnimplementedMenuServiceServer) Create(context.Context, *Menu) (*MenuResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedMenuServiceServer) Update(context.Context, *Menu) (*MenuResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedMenuServiceServer) Delete(context.Context, *MenuIds) (*MenuResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedMenuServiceServer) FindAll(context.Context, *RoleMenuParam) (*MenuResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAll not implemented")
}
func (UnimplementedMenuServiceServer) FindByRoleIds(context.Context, *RoleMenuParam) (*MenuResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByRoleIds not implemented")
}
func (UnimplementedMenuServiceServer) FindTreeList(context.Context, *RoleMenuParam) (*MenuResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindTreeList not implemented")
}
func (UnimplementedMenuServiceServer) mustEmbedUnimplementedMenuServiceServer() {}

// UnsafeMenuServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MenuServiceServer will
// result in compilation errors.
type UnsafeMenuServiceServer interface {
	mustEmbedUnimplementedMenuServiceServer()
}

func RegisterMenuServiceServer(s grpc.ServiceRegistrar, srv MenuServiceServer) {
	s.RegisterService(&MenuService_ServiceDesc, srv)
}

func _MenuService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Menu)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MenuService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuServiceServer).Create(ctx, req.(*Menu))
	}
	return interceptor(ctx, in, info, handler)
}

func _MenuService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Menu)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MenuService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuServiceServer).Update(ctx, req.(*Menu))
	}
	return interceptor(ctx, in, info, handler)
}

func _MenuService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MenuIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MenuService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuServiceServer).Delete(ctx, req.(*MenuIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _MenuService_FindAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleMenuParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuServiceServer).FindAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MenuService_FindAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuServiceServer).FindAll(ctx, req.(*RoleMenuParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MenuService_FindByRoleIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleMenuParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuServiceServer).FindByRoleIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MenuService_FindByRoleIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuServiceServer).FindByRoleIds(ctx, req.(*RoleMenuParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MenuService_FindTreeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleMenuParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuServiceServer).FindTreeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MenuService_FindTreeList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuServiceServer).FindTreeList(ctx, req.(*RoleMenuParam))
	}
	return interceptor(ctx, in, info, handler)
}

// MenuService_ServiceDesc is the grpc.ServiceDesc for MenuService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MenuService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "common.MenuService",
	HandlerType: (*MenuServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _MenuService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _MenuService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _MenuService_Delete_Handler,
		},
		{
			MethodName: "FindAll",
			Handler:    _MenuService_FindAll_Handler,
		},
		{
			MethodName: "FindByRoleIds",
			Handler:    _MenuService_FindByRoleIds_Handler,
		},
		{
			MethodName: "FindTreeList",
			Handler:    _MenuService_FindTreeList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/common/menu.proto",
}
