// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: protos/common/agreement.proto

package common

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AgreementService_Create_FullMethodName       = "/common.AgreementService/Create"
	AgreementService_Update_FullMethodName       = "/common.AgreementService/Update"
	AgreementService_Delete_FullMethodName       = "/common.AgreementService/Delete"
	AgreementService_FindById_FullMethodName     = "/common.AgreementService/FindById"
	AgreementService_FindPageList_FullMethodName = "/common.AgreementService/FindPageList"
)

// AgreementServiceClient is the client API for AgreementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgreementServiceClient interface {
	// 新增协议
	Create(ctx context.Context, in *Agreement, opts ...grpc.CallOption) (*AgreementResponse, error)
	// 修改协议
	Update(ctx context.Context, in *Agreement, opts ...grpc.CallOption) (*AgreementResponse, error)
	// 删除协议
	Delete(ctx context.Context, in *AgreementIds, opts ...grpc.CallOption) (*AgreementResponse, error)
	// 查询协议详情
	FindById(ctx context.Context, in *AgreementIds, opts ...grpc.CallOption) (*AgreementResponse, error)
	// 查询协议分页
	FindPageList(ctx context.Context, in *AgreementPageAuthQuery, opts ...grpc.CallOption) (*AgreementResponse, error)
}

type agreementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAgreementServiceClient(cc grpc.ClientConnInterface) AgreementServiceClient {
	return &agreementServiceClient{cc}
}

func (c *agreementServiceClient) Create(ctx context.Context, in *Agreement, opts ...grpc.CallOption) (*AgreementResponse, error) {
	out := new(AgreementResponse)
	err := c.cc.Invoke(ctx, AgreementService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agreementServiceClient) Update(ctx context.Context, in *Agreement, opts ...grpc.CallOption) (*AgreementResponse, error) {
	out := new(AgreementResponse)
	err := c.cc.Invoke(ctx, AgreementService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agreementServiceClient) Delete(ctx context.Context, in *AgreementIds, opts ...grpc.CallOption) (*AgreementResponse, error) {
	out := new(AgreementResponse)
	err := c.cc.Invoke(ctx, AgreementService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agreementServiceClient) FindById(ctx context.Context, in *AgreementIds, opts ...grpc.CallOption) (*AgreementResponse, error) {
	out := new(AgreementResponse)
	err := c.cc.Invoke(ctx, AgreementService_FindById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agreementServiceClient) FindPageList(ctx context.Context, in *AgreementPageAuthQuery, opts ...grpc.CallOption) (*AgreementResponse, error) {
	out := new(AgreementResponse)
	err := c.cc.Invoke(ctx, AgreementService_FindPageList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgreementServiceServer is the server API for AgreementService service.
// All implementations must embed UnimplementedAgreementServiceServer
// for forward compatibility
type AgreementServiceServer interface {
	// 新增协议
	Create(context.Context, *Agreement) (*AgreementResponse, error)
	// 修改协议
	Update(context.Context, *Agreement) (*AgreementResponse, error)
	// 删除协议
	Delete(context.Context, *AgreementIds) (*AgreementResponse, error)
	// 查询协议详情
	FindById(context.Context, *AgreementIds) (*AgreementResponse, error)
	// 查询协议分页
	FindPageList(context.Context, *AgreementPageAuthQuery) (*AgreementResponse, error)
	mustEmbedUnimplementedAgreementServiceServer()
}

// UnimplementedAgreementServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAgreementServiceServer struct {
}

func (UnimplementedAgreementServiceServer) Create(context.Context, *Agreement) (*AgreementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedAgreementServiceServer) Update(context.Context, *Agreement) (*AgreementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedAgreementServiceServer) Delete(context.Context, *AgreementIds) (*AgreementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedAgreementServiceServer) FindById(context.Context, *AgreementIds) (*AgreementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindById not implemented")
}
func (UnimplementedAgreementServiceServer) FindPageList(context.Context, *AgreementPageAuthQuery) (*AgreementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPageList not implemented")
}
func (UnimplementedAgreementServiceServer) mustEmbedUnimplementedAgreementServiceServer() {}

// UnsafeAgreementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgreementServiceServer will
// result in compilation errors.
type UnsafeAgreementServiceServer interface {
	mustEmbedUnimplementedAgreementServiceServer()
}

func RegisterAgreementServiceServer(s grpc.ServiceRegistrar, srv AgreementServiceServer) {
	s.RegisterService(&AgreementService_ServiceDesc, srv)
}

func _AgreementService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Agreement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgreementServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgreementService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgreementServiceServer).Create(ctx, req.(*Agreement))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgreementService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Agreement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgreementServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgreementService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgreementServiceServer).Update(ctx, req.(*Agreement))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgreementService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgreementIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgreementServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgreementService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgreementServiceServer).Delete(ctx, req.(*AgreementIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgreementService_FindById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgreementIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgreementServiceServer).FindById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgreementService_FindById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgreementServiceServer).FindById(ctx, req.(*AgreementIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgreementService_FindPageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgreementPageAuthQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgreementServiceServer).FindPageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgreementService_FindPageList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgreementServiceServer).FindPageList(ctx, req.(*AgreementPageAuthQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// AgreementService_ServiceDesc is the grpc.ServiceDesc for AgreementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AgreementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "common.AgreementService",
	HandlerType: (*AgreementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _AgreementService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _AgreementService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _AgreementService_Delete_Handler,
		},
		{
			MethodName: "FindById",
			Handler:    _AgreementService_FindById_Handler,
		},
		{
			MethodName: "FindPageList",
			Handler:    _AgreementService_FindPageList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/common/agreement.proto",
}
