// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: protos/common/user_address.proto

package common

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserAddressService_Create_FullMethodName       = "/common.UserAddressService/Create"
	UserAddressService_Update_FullMethodName       = "/common.UserAddressService/Update"
	UserAddressService_Delete_FullMethodName       = "/common.UserAddressService/Delete"
	UserAddressService_FindById_FullMethodName     = "/common.UserAddressService/FindById"
	UserAddressService_FindPageList_FullMethodName = "/common.UserAddressService/FindPageList"
	UserAddressService_FindList_FullMethodName     = "/common.UserAddressService/FindList"
)

// UserAddressServiceClient is the client API for UserAddressService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserAddressServiceClient interface {
	// 新增用户地址
	Create(ctx context.Context, in *UserAddress, opts ...grpc.CallOption) (*UserAddressResponse, error)
	// 修改用户地址
	Update(ctx context.Context, in *UserAddress, opts ...grpc.CallOption) (*UserAddressResponse, error)
	// 删除用户地址
	Delete(ctx context.Context, in *UserAddressIds, opts ...grpc.CallOption) (*UserAddressResponse, error)
	// 查询用户地址
	FindById(ctx context.Context, in *UserAddressIds, opts ...grpc.CallOption) (*UserAddressResponse, error)
	// 查询用户地址分页
	FindPageList(ctx context.Context, in *UserAddressPageAuthQuery, opts ...grpc.CallOption) (*UserAddressResponse, error)
	// 查询用户下的收货地址
	FindList(ctx context.Context, in *UserAddressIds, opts ...grpc.CallOption) (*UserAddressResponse, error)
}

type userAddressServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserAddressServiceClient(cc grpc.ClientConnInterface) UserAddressServiceClient {
	return &userAddressServiceClient{cc}
}

func (c *userAddressServiceClient) Create(ctx context.Context, in *UserAddress, opts ...grpc.CallOption) (*UserAddressResponse, error) {
	out := new(UserAddressResponse)
	err := c.cc.Invoke(ctx, UserAddressService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAddressServiceClient) Update(ctx context.Context, in *UserAddress, opts ...grpc.CallOption) (*UserAddressResponse, error) {
	out := new(UserAddressResponse)
	err := c.cc.Invoke(ctx, UserAddressService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAddressServiceClient) Delete(ctx context.Context, in *UserAddressIds, opts ...grpc.CallOption) (*UserAddressResponse, error) {
	out := new(UserAddressResponse)
	err := c.cc.Invoke(ctx, UserAddressService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAddressServiceClient) FindById(ctx context.Context, in *UserAddressIds, opts ...grpc.CallOption) (*UserAddressResponse, error) {
	out := new(UserAddressResponse)
	err := c.cc.Invoke(ctx, UserAddressService_FindById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAddressServiceClient) FindPageList(ctx context.Context, in *UserAddressPageAuthQuery, opts ...grpc.CallOption) (*UserAddressResponse, error) {
	out := new(UserAddressResponse)
	err := c.cc.Invoke(ctx, UserAddressService_FindPageList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAddressServiceClient) FindList(ctx context.Context, in *UserAddressIds, opts ...grpc.CallOption) (*UserAddressResponse, error) {
	out := new(UserAddressResponse)
	err := c.cc.Invoke(ctx, UserAddressService_FindList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserAddressServiceServer is the server API for UserAddressService service.
// All implementations must embed UnimplementedUserAddressServiceServer
// for forward compatibility
type UserAddressServiceServer interface {
	// 新增用户地址
	Create(context.Context, *UserAddress) (*UserAddressResponse, error)
	// 修改用户地址
	Update(context.Context, *UserAddress) (*UserAddressResponse, error)
	// 删除用户地址
	Delete(context.Context, *UserAddressIds) (*UserAddressResponse, error)
	// 查询用户地址
	FindById(context.Context, *UserAddressIds) (*UserAddressResponse, error)
	// 查询用户地址分页
	FindPageList(context.Context, *UserAddressPageAuthQuery) (*UserAddressResponse, error)
	// 查询用户下的收货地址
	FindList(context.Context, *UserAddressIds) (*UserAddressResponse, error)
	mustEmbedUnimplementedUserAddressServiceServer()
}

// UnimplementedUserAddressServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserAddressServiceServer struct {
}

func (UnimplementedUserAddressServiceServer) Create(context.Context, *UserAddress) (*UserAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedUserAddressServiceServer) Update(context.Context, *UserAddress) (*UserAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedUserAddressServiceServer) Delete(context.Context, *UserAddressIds) (*UserAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedUserAddressServiceServer) FindById(context.Context, *UserAddressIds) (*UserAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindById not implemented")
}
func (UnimplementedUserAddressServiceServer) FindPageList(context.Context, *UserAddressPageAuthQuery) (*UserAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPageList not implemented")
}
func (UnimplementedUserAddressServiceServer) FindList(context.Context, *UserAddressIds) (*UserAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindList not implemented")
}
func (UnimplementedUserAddressServiceServer) mustEmbedUnimplementedUserAddressServiceServer() {}

// UnsafeUserAddressServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserAddressServiceServer will
// result in compilation errors.
type UnsafeUserAddressServiceServer interface {
	mustEmbedUnimplementedUserAddressServiceServer()
}

func RegisterUserAddressServiceServer(s grpc.ServiceRegistrar, srv UserAddressServiceServer) {
	s.RegisterService(&UserAddressService_ServiceDesc, srv)
}

func _UserAddressService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAddressServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAddressService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAddressServiceServer).Create(ctx, req.(*UserAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAddressService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAddressServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAddressService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAddressServiceServer).Update(ctx, req.(*UserAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAddressService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAddressIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAddressServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAddressService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAddressServiceServer).Delete(ctx, req.(*UserAddressIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAddressService_FindById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAddressIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAddressServiceServer).FindById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAddressService_FindById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAddressServiceServer).FindById(ctx, req.(*UserAddressIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAddressService_FindPageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAddressPageAuthQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAddressServiceServer).FindPageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAddressService_FindPageList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAddressServiceServer).FindPageList(ctx, req.(*UserAddressPageAuthQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAddressService_FindList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAddressIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAddressServiceServer).FindList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAddressService_FindList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAddressServiceServer).FindList(ctx, req.(*UserAddressIds))
	}
	return interceptor(ctx, in, info, handler)
}

// UserAddressService_ServiceDesc is the grpc.ServiceDesc for UserAddressService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserAddressService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "common.UserAddressService",
	HandlerType: (*UserAddressServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _UserAddressService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _UserAddressService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _UserAddressService_Delete_Handler,
		},
		{
			MethodName: "FindById",
			Handler:    _UserAddressService_FindById_Handler,
		},
		{
			MethodName: "FindPageList",
			Handler:    _UserAddressService_FindPageList_Handler,
		},
		{
			MethodName: "FindList",
			Handler:    _UserAddressService_FindList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/common/user_address.proto",
}
