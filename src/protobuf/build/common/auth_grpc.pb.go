// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: protos/common/auth.proto

package common

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	global "protobuf/build/global"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Auth_CreateRoleMenu_FullMethodName = "/common.Auth/CreateRoleMenu"
	Auth_CreateUserRole_FullMethodName = "/common.Auth/CreateUserRole"
	Auth_CreateRoleFunc_FullMethodName = "/common.Auth/CreateRoleFunc"
	Auth_GetToken_FullMethodName       = "/common.Auth/GetToken"
)

// AuthClient is the client API for Auth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthClient interface {
	// 新增角色关联菜单数据
	CreateRoleMenu(ctx context.Context, in *RoleMenuList, opts ...grpc.CallOption) (*AuthResponse, error)
	// 创建角色与用户关联
	CreateUserRole(ctx context.Context, in *UserRoleList, opts ...grpc.CallOption) (*AuthResponse, error)
	// 创建角色与功能关联
	CreateRoleFunc(ctx context.Context, in *RoleFuncList, opts ...grpc.CallOption) (*AuthResponse, error)
	// 用户获取token数据处理
	GetToken(ctx context.Context, in *global.Auth, opts ...grpc.CallOption) (*AuthResponse, error)
}

type authClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthClient(cc grpc.ClientConnInterface) AuthClient {
	return &authClient{cc}
}

func (c *authClient) CreateRoleMenu(ctx context.Context, in *RoleMenuList, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, Auth_CreateRoleMenu_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) CreateUserRole(ctx context.Context, in *UserRoleList, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, Auth_CreateUserRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) CreateRoleFunc(ctx context.Context, in *RoleFuncList, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, Auth_CreateRoleFunc_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) GetToken(ctx context.Context, in *global.Auth, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, Auth_GetToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServer is the server API for Auth service.
// All implementations must embed UnimplementedAuthServer
// for forward compatibility
type AuthServer interface {
	// 新增角色关联菜单数据
	CreateRoleMenu(context.Context, *RoleMenuList) (*AuthResponse, error)
	// 创建角色与用户关联
	CreateUserRole(context.Context, *UserRoleList) (*AuthResponse, error)
	// 创建角色与功能关联
	CreateRoleFunc(context.Context, *RoleFuncList) (*AuthResponse, error)
	// 用户获取token数据处理
	GetToken(context.Context, *global.Auth) (*AuthResponse, error)
	mustEmbedUnimplementedAuthServer()
}

// UnimplementedAuthServer must be embedded to have forward compatible implementations.
type UnimplementedAuthServer struct {
}

func (UnimplementedAuthServer) CreateRoleMenu(context.Context, *RoleMenuList) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoleMenu not implemented")
}
func (UnimplementedAuthServer) CreateUserRole(context.Context, *UserRoleList) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserRole not implemented")
}
func (UnimplementedAuthServer) CreateRoleFunc(context.Context, *RoleFuncList) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoleFunc not implemented")
}
func (UnimplementedAuthServer) GetToken(context.Context, *global.Auth) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToken not implemented")
}
func (UnimplementedAuthServer) mustEmbedUnimplementedAuthServer() {}

// UnsafeAuthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServer will
// result in compilation errors.
type UnsafeAuthServer interface {
	mustEmbedUnimplementedAuthServer()
}

func RegisterAuthServer(s grpc.ServiceRegistrar, srv AuthServer) {
	s.RegisterService(&Auth_ServiceDesc, srv)
}

func _Auth_CreateRoleMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleMenuList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).CreateRoleMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_CreateRoleMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).CreateRoleMenu(ctx, req.(*RoleMenuList))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_CreateUserRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRoleList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).CreateUserRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_CreateUserRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).CreateUserRole(ctx, req.(*UserRoleList))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_CreateRoleFunc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleFuncList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).CreateRoleFunc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_CreateRoleFunc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).CreateRoleFunc(ctx, req.(*RoleFuncList))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(global.Auth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_GetToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).GetToken(ctx, req.(*global.Auth))
	}
	return interceptor(ctx, in, info, handler)
}

// Auth_ServiceDesc is the grpc.ServiceDesc for Auth service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Auth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "common.Auth",
	HandlerType: (*AuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRoleMenu",
			Handler:    _Auth_CreateRoleMenu_Handler,
		},
		{
			MethodName: "CreateUserRole",
			Handler:    _Auth_CreateUserRole_Handler,
		},
		{
			MethodName: "CreateRoleFunc",
			Handler:    _Auth_CreateRoleFunc_Handler,
		},
		{
			MethodName: "GetToken",
			Handler:    _Auth_GetToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/common/auth.proto",
}
