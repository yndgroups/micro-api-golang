// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: protos/common/app_module.proto

package common

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AppModuleService_Create_FullMethodName       = "/common.AppModuleService/Create"
	AppModuleService_Update_FullMethodName       = "/common.AppModuleService/Update"
	AppModuleService_Delete_FullMethodName       = "/common.AppModuleService/Delete"
	AppModuleService_FindById_FullMethodName     = "/common.AppModuleService/FindById"
	AppModuleService_FindPageList_FullMethodName = "/common.AppModuleService/FindPageList"
)

// AppModuleServiceClient is the client API for AppModuleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppModuleServiceClient interface {
	// 新增应用模块
	Create(ctx context.Context, in *AppModule, opts ...grpc.CallOption) (*AppModuleResponse, error)
	// 修改应用模块
	Update(ctx context.Context, in *AppModule, opts ...grpc.CallOption) (*AppModuleResponse, error)
	// 删除应用模块
	Delete(ctx context.Context, in *AppModuleIds, opts ...grpc.CallOption) (*AppModuleResponse, error)
	// 查询应用模块详情
	FindById(ctx context.Context, in *AppModuleIds, opts ...grpc.CallOption) (*AppModuleResponse, error)
	// 查询应用模块分页
	FindPageList(ctx context.Context, in *AppModulePageAuthQuery, opts ...grpc.CallOption) (*AppModuleResponse, error)
}

type appModuleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAppModuleServiceClient(cc grpc.ClientConnInterface) AppModuleServiceClient {
	return &appModuleServiceClient{cc}
}

func (c *appModuleServiceClient) Create(ctx context.Context, in *AppModule, opts ...grpc.CallOption) (*AppModuleResponse, error) {
	out := new(AppModuleResponse)
	err := c.cc.Invoke(ctx, AppModuleService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appModuleServiceClient) Update(ctx context.Context, in *AppModule, opts ...grpc.CallOption) (*AppModuleResponse, error) {
	out := new(AppModuleResponse)
	err := c.cc.Invoke(ctx, AppModuleService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appModuleServiceClient) Delete(ctx context.Context, in *AppModuleIds, opts ...grpc.CallOption) (*AppModuleResponse, error) {
	out := new(AppModuleResponse)
	err := c.cc.Invoke(ctx, AppModuleService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appModuleServiceClient) FindById(ctx context.Context, in *AppModuleIds, opts ...grpc.CallOption) (*AppModuleResponse, error) {
	out := new(AppModuleResponse)
	err := c.cc.Invoke(ctx, AppModuleService_FindById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appModuleServiceClient) FindPageList(ctx context.Context, in *AppModulePageAuthQuery, opts ...grpc.CallOption) (*AppModuleResponse, error) {
	out := new(AppModuleResponse)
	err := c.cc.Invoke(ctx, AppModuleService_FindPageList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppModuleServiceServer is the server API for AppModuleService service.
// All implementations must embed UnimplementedAppModuleServiceServer
// for forward compatibility
type AppModuleServiceServer interface {
	// 新增应用模块
	Create(context.Context, *AppModule) (*AppModuleResponse, error)
	// 修改应用模块
	Update(context.Context, *AppModule) (*AppModuleResponse, error)
	// 删除应用模块
	Delete(context.Context, *AppModuleIds) (*AppModuleResponse, error)
	// 查询应用模块详情
	FindById(context.Context, *AppModuleIds) (*AppModuleResponse, error)
	// 查询应用模块分页
	FindPageList(context.Context, *AppModulePageAuthQuery) (*AppModuleResponse, error)
	mustEmbedUnimplementedAppModuleServiceServer()
}

// UnimplementedAppModuleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAppModuleServiceServer struct {
}

func (UnimplementedAppModuleServiceServer) Create(context.Context, *AppModule) (*AppModuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedAppModuleServiceServer) Update(context.Context, *AppModule) (*AppModuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedAppModuleServiceServer) Delete(context.Context, *AppModuleIds) (*AppModuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedAppModuleServiceServer) FindById(context.Context, *AppModuleIds) (*AppModuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindById not implemented")
}
func (UnimplementedAppModuleServiceServer) FindPageList(context.Context, *AppModulePageAuthQuery) (*AppModuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPageList not implemented")
}
func (UnimplementedAppModuleServiceServer) mustEmbedUnimplementedAppModuleServiceServer() {}

// UnsafeAppModuleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppModuleServiceServer will
// result in compilation errors.
type UnsafeAppModuleServiceServer interface {
	mustEmbedUnimplementedAppModuleServiceServer()
}

func RegisterAppModuleServiceServer(s grpc.ServiceRegistrar, srv AppModuleServiceServer) {
	s.RegisterService(&AppModuleService_ServiceDesc, srv)
}

func _AppModuleService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppModule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppModuleServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppModuleService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppModuleServiceServer).Create(ctx, req.(*AppModule))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppModuleService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppModule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppModuleServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppModuleService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppModuleServiceServer).Update(ctx, req.(*AppModule))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppModuleService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppModuleIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppModuleServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppModuleService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppModuleServiceServer).Delete(ctx, req.(*AppModuleIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppModuleService_FindById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppModuleIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppModuleServiceServer).FindById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppModuleService_FindById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppModuleServiceServer).FindById(ctx, req.(*AppModuleIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppModuleService_FindPageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppModulePageAuthQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppModuleServiceServer).FindPageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppModuleService_FindPageList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppModuleServiceServer).FindPageList(ctx, req.(*AppModulePageAuthQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// AppModuleService_ServiceDesc is the grpc.ServiceDesc for AppModuleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppModuleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "common.AppModuleService",
	HandlerType: (*AppModuleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _AppModuleService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _AppModuleService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _AppModuleService_Delete_Handler,
		},
		{
			MethodName: "FindById",
			Handler:    _AppModuleService_FindById_Handler,
		},
		{
			MethodName: "FindPageList",
			Handler:    _AppModuleService_FindPageList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/common/app_module.proto",
}
